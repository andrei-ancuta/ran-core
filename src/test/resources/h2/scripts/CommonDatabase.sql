DROP TABLE IF EXISTS APP_COMPONENTA;

CREATE TABLE APP_COMPONENTA
(
  id_app_componenta NUMBER        NOT NULL,
  cod               VARCHAR2(10)  NOT NULL,
  denumire          VARCHAR2(100) NOT NULL,
  descriere         VARCHAR2(500),
  PRIMARY KEY (ID_APP_COMPONENTA),
  UNIQUE UK_APP_COMPONENTA_COD (COD)
);

DROP TABLE IF EXISTS APP_CONTEXT;
CREATE TABLE APP_CONTEXT
(
  id_app_context NUMBER        NOT NULL,
  cod            VARCHAR2(10)  NOT NULL,
  denumire       VARCHAR2(100) NOT NULL,
  descriere      VARCHAR2(500),
  PRIMARY KEY (ID_APP_CONTEXT),
  UNIQUE UK_APP_CONTEXT_COD (COD)
);

DROP TABLE IF EXISTS APP_UTILIZATOR;

CREATE TABLE APP_UTILIZATOR
(
  id_app_utilizator NUMBER       NOT NULL,
  nume_utilizator   VARCHAR2(50) NOT NULL,
  nume              VARCHAR2(50),
  prenume           VARCHAR2(50),
  email             VARCHAR2(50),
  cnp               VARCHAR2(13),
  observatii        VARCHAR2(500),
  is_activ          NUMBER(1)    NOT NULL,
  nif               VARCHAR2(13),
  PRIMARY KEY (ID_APP_UTILIZATOR),
  UNIQUE UK_APP_UTILIZATOR_NUME_UTILIZ (NUME_UTILIZATOR)
);

DROP TABLE IF EXISTS APP_SESIUNE;
CREATE TABLE APP_SESIUNE
(
  id_app_sesiune    NUMBER        NOT NULL,
  fk_app_utilizator NUMBER        NOT NULL,
  fk_app_context    NUMBER        NOT NULL,
  uid_sesiune_http  VARCHAR2(500) NOT NULL,
  adresa_ip         VARCHAR2(50)  NOT NULL,
  data_start        DATE          NOT NULL,
  data_stop         DATE,
  PRIMARY KEY (ID_APP_SESIUNE),
);

CREATE INDEX IDX_APP_SESIUNE_FK_APP_CONTEXT ON APP_SESIUNE (FK_APP_CONTEXT);
CREATE INDEX IDX_APP_SESIUNE_FK_APP_UTILIZ ON APP_SESIUNE (FK_APP_UTILIZATOR);
CREATE INDEX IDX_APP_SES_DATA_START_STOP ON APP_SESIUNE (DATA_START, DATA_STOP);

ALTER TABLE APP_SESIUNE ADD FOREIGN KEY (FK_APP_CONTEXT) REFERENCES APP_CONTEXT (ID_APP_CONTEXT);
ALTER TABLE APP_SESIUNE ADD FOREIGN KEY (FK_APP_UTILIZATOR) REFERENCES APP_UTILIZATOR (ID_APP_UTILIZATOR);

DROP TABLE IF EXISTS APP_TIP_OPERATIE;

CREATE TABLE APP_TIP_OPERATIE
(
  id_app_tip_operatie NUMBER        NOT NULL,
  cod                 VARCHAR2(10)  NOT NULL,
  denumire            VARCHAR2(100) NOT NULL,
  descriere           VARCHAR2(500),
  PRIMARY KEY (ID_APP_TIP_OPERATIE),
  UNIQUE UK_APP_TIP_OPERATIE_COD (COD)
);

DROP TABLE IF EXISTS APP_OPERATIE_SESIUNE;

CREATE TABLE APP_OPERATIE_SESIUNE
(
  id_app_operatie_sesiune NUMBER        NOT NULL,
  fk_app_sesiune          NUMBER        NOT NULL,
  fk_app_tip_operatie     NUMBER        NOT NULL,
  data_operatie           DATE          NOT NULL,
  descriere               VARCHAR2(500) NOT NULL,
  descriere_complet       CLOB,
  PRIMARY KEY (ID_APP_OPERATIE_SESIUNE)
);
CREATE INDEX IDX_APP_OP_SESIUNE_DATA_OP ON APP_OPERATIE_SESIUNE (DATA_OPERATIE);
CREATE INDEX IDX_APP_OP_SESIUNE_FK_APP_SES ON APP_OPERATIE_SESIUNE (FK_APP_SESIUNE);
CREATE INDEX IDX_APP_OP_SES_FK_APP_TIP_SES ON APP_OPERATIE_SESIUNE (FK_APP_TIP_OPERATIE);
ALTER TABLE APP_OPERATIE_SESIUNE ADD FOREIGN KEY (FK_APP_SESIUNE) REFERENCES APP_SESIUNE (ID_APP_SESIUNE);
ALTER TABLE APP_OPERATIE_SESIUNE ADD FOREIGN KEY (FK_APP_TIP_OPERATIE) REFERENCES APP_TIP_OPERATIE (ID_APP_TIP_OPERATIE);

DROP TABLE IF EXISTS APP_PARAMETRU;

CREATE TABLE APP_PARAMETRU
(
  id_app_parametru  NUMBER        NOT NULL,
  cod               VARCHAR2(10)  NOT NULL,
  denumire          VARCHAR2(100) NOT NULL,
  descriere         VARCHAR2(500),
  valoare           VARCHAR2(100) NOT NULL,
  valoare_implicita VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_APP_PARAMETRU),
  UNIQUE UK_APP_PARAMETRU_COD (COD)
);

DROP TABLE IF EXISTS APP_ROL;

CREATE TABLE APP_ROL
(
  id_app_rol        NUMBER              NOT NULL,
  fk_app_context    NUMBER              NOT NULL,
  fk_app_componenta NUMBER              NOT NULL,
  cod               VARCHAR2(10)        NOT NULL,
  denumire          VARCHAR2(100)       NOT NULL,
  descriere         VARCHAR2(500),
  is_activ          NUMBER(1) DEFAULT 1 NOT NULL,
  PRIMARY KEY (ID_APP_ROL),
  UNIQUE UK_APP_ROL_COD (COD)
);

CREATE INDEX IDX_APP_ROL_FK_APP_COMPONENTA ON APP_ROL (FK_APP_COMPONENTA);
CREATE INDEX IDX_APP_ROL_FK_APP_CONTEXT ON APP_ROL (FK_APP_CONTEXT);
ALTER TABLE APP_ROL ADD FOREIGN KEY (FK_APP_COMPONENTA) REFERENCES APP_COMPONENTA (ID_APP_COMPONENTA);
ALTER TABLE APP_ROL ADD FOREIGN KEY (FK_APP_CONTEXT) REFERENCES APP_CONTEXT (ID_APP_CONTEXT);

DROP TABLE IF EXISTS NOM_TIP_INSTITUTIE;

CREATE TABLE NOM_TIP_INSTITUTIE
(
  id_nom_tip_institutie NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_INSTITUTIE),
  UNIQUE UK_NOM_TIP_INSTITUTIE_COD (COD)
);

DROP TABLE IF EXISTS NOM_INSTITUTIE;

CREATE TABLE NOM_INSTITUTIE
(
  id_nom_institutie     NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  fk_nom_tip_institutie NUMBER        NOT NULL,
  PRIMARY KEY (ID_NOM_INSTITUTIE),
  UNIQUE UK_NOM_INSTITUTIE_COD (COD)
);
CREATE INDEX IDX_NOM_INST_FK_NOM_TIP_INST ON NOM_INSTITUTIE (FK_NOM_TIP_INSTITUTIE);
ALTER TABLE NOM_INSTITUTIE ADD FOREIGN KEY (FK_NOM_TIP_INSTITUTIE) REFERENCES NOM_TIP_INSTITUTIE (ID_NOM_TIP_INSTITUTIE);

DROP TABLE IF EXISTS APP_ROL_UTILIZATOR;
CREATE TABLE APP_ROL_UTILIZATOR
(
  id_app_rol_utilizator NUMBER NOT NULL,
  fk_app_rol            NUMBER NOT NULL,
  fk_app_utilizator     NUMBER NOT NULL,
  fk_nom_institutie     NUMBER,
  fk_nom_judet          NUMBER,
  fk_nom_uat            NUMBER,
  PRIMARY KEY (ID_APP_ROL_UTILIZATOR)
);
CREATE INDEX IDX_APP_ROL_UTILIZ_FK_APP_ROL ON APP_ROL_UTILIZATOR (FK_APP_ROL);
CREATE INDEX IDX_APP_ROL_UTILIZ_FK_APP_UTIL ON APP_ROL_UTILIZATOR (FK_APP_UTILIZATOR);
CREATE INDEX IDX_APP_ROL_UTILIZ_FK_NOM_INST ON APP_ROL_UTILIZATOR (FK_NOM_INSTITUTIE);
CREATE INDEX IDX_APP_ROL_UTILIZ_FK_NOM_JUD ON APP_ROL_UTILIZATOR (FK_NOM_JUDET);
CREATE INDEX IDX_APP_ROL_UTILIZ_FK_NOM_UAT ON APP_ROL_UTILIZATOR (FK_NOM_UAT);
--alter table APP_ROL_UTILIZATOR add foreign key (FK_NOM_JUDET)references RAN_REGISTRU_DEV.NOM_JUDET (ID_NOM_JUDET);
ALTER TABLE APP_ROL_UTILIZATOR ADD FOREIGN KEY (FK_APP_ROL) REFERENCES APP_ROL (ID_APP_ROL);
ALTER TABLE APP_ROL_UTILIZATOR ADD FOREIGN KEY (FK_APP_UTILIZATOR) REFERENCES APP_UTILIZATOR (ID_APP_UTILIZATOR);
ALTER TABLE APP_ROL_UTILIZATOR ADD FOREIGN KEY (FK_NOM_INSTITUTIE) REFERENCES NOM_INSTITUTIE (ID_NOM_INSTITUTIE);
--alter table APP_ROL_UTILIZATOR add foreign key (FK_NOM_UAT) references RAN_REGISTRU_DEV.NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS APP_SISTEM;

CREATE TABLE APP_SISTEM
(
  id_app_sistem         NUMBER        NOT NULL,
  fk_nom_institutie     NUMBER        NOT NULL,
  fk_nom_judet          NUMBER,
  fk_nom_uat            NUMBER,
  cod                   VARCHAR2(10),
  denumire              VARCHAR2(100) NOT NULL,
  cod_licenta           VARCHAR2(60)  NOT NULL,
  data_generare_licenta DATE          NOT NULL,
  is_activ              NUMBER(1)     NOT NULL,
  PRIMARY KEY (ID_APP_SISTEM),
  UNIQUE UK_APP_SISTEM_COD (COD),
  CHECK (IS_ACTIV IN (0, 1))
);

CREATE INDEX IDX_APP_SISTEM_COD_LICENTA ON APP_SISTEM (COD_LICENTA);
CREATE INDEX IDX_APP_SISTEM_FK_NOM_INSTIT ON APP_SISTEM (FK_NOM_INSTITUTIE);
CREATE INDEX IDX_APP_SISTEM_FK_NOM_JUDET ON APP_SISTEM (FK_NOM_JUDET);
CREATE INDEX IDX_APP_SISTEM_FK_NOM_UAT ON APP_SISTEM (FK_NOM_UAT);
--create bitmap index IDX_APP_SISTEM_IS_ACTIV on APP_SISTEM (IS_ACTIV);

ALTER TABLE APP_SISTEM ADD FOREIGN KEY (FK_NOM_INSTITUTIE) REFERENCES NOM_INSTITUTIE (ID_NOM_INSTITUTIE);
--alter table APP_SISTEM add foreign key (FK_NOM_JUDET) references RAN_REGISTRU_DEV.NOM_JUDET (ID_NOM_JUDET);
--alter table APP_SISTEM add foreign key (FK_NOM_UAT) references RAN_REGISTRU_DEV.NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS APP_UTILIZATOR_GOSPODARIE;

CREATE TABLE APP_UTILIZATOR_GOSPODARIE
(
  id_app_utilizator_gospodarie NUMBER NOT NULL,
  fk_app_utilizator            NUMBER NOT NULL,
  fk_gospodarie                NUMBER NOT NULL,
  PRIMARY KEY (ID_APP_UTILIZATOR_GOSPODARIE)
);
ALTER TABLE APP_UTILIZATOR_GOSPODARIE  ADD FOREIGN KEY (FK_APP_UTILIZATOR) REFERENCES APP_UTILIZATOR (ID_APP_UTILIZATOR);

DROP TABLE IF EXISTS NOM_STARE_REGISTRU;
CREATE TABLE NOM_STARE_REGISTRU
(
  id_nom_stare_registru NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_STARE_REGISTRU),
  UNIQUE UK_NOM_STARE_REGISTRU_COD (COD)
);

DROP TABLE IF EXISTS NOM_STARE_INCARCARE;

CREATE TABLE NOM_STARE_INCARCARE
(
  id_nom_stare_incarcare NUMBER        NOT NULL,
  cod                    VARCHAR2(10)  NOT NULL,
  denumire               VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_STARE_INCARCARE),
  UNIQUE UK_NOM_STARE_INCARCARE_COD (COD)
);

DROP TABLE IF EXISTS INCARCARE;

CREATE TABLE INCARCARE
(
  id_incarcare           NUMBER        NOT NULL,
  fk_app_utilizator      NUMBER        NOT NULL,
  fk_nom_uat             NUMBER        NOT NULL,
  fk_nom_stare_incarcare NUMBER        NOT NULL,
  index_incarcare        VARCHAR2(36)  NOT NULL,
  data_incarcare         DATE          NOT NULL,
  denumire_fisier        VARCHAR2(100) NOT NULL,
  continut_fisier        BLOB,
  PRIMARY KEY (ID_INCARCARE)
);
CREATE INDEX IDX_INCARCARE_DATA_INCARCARE ON INCARCARE (DATA_INCARCARE);
CREATE INDEX IDX_INCARCARE_FK_APP_UTILIZAT ON INCARCARE (FK_APP_UTILIZATOR);
CREATE INDEX IDX_INCARCARE_FK_NOM_ST_INCARC ON INCARCARE (FK_NOM_STARE_INCARCARE);
CREATE INDEX IDX_INCARCARE_FK_NOM_UAT ON INCARCARE (FK_NOM_UAT);
CREATE INDEX IDX_INCARCARE_INDEX_INCARCARE ON INCARCARE (INDEX_INCARCARE);
ALTER TABLE INCARCARE ADD FOREIGN KEY (FK_APP_UTILIZATOR) REFERENCES APP_UTILIZATOR (ID_APP_UTILIZATOR);
ALTER TABLE INCARCARE ADD FOREIGN KEY (FK_NOM_STARE_INCARCARE) REFERENCES NOM_STARE_INCARCARE (ID_NOM_STARE_INCARCARE);
--alter table INCARCARE add foreign key (FK_NOM_UAT) references RAN_REGISTRU_DEV.NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS REGISTRU;

CREATE TABLE REGISTRU
(
  id_registru           NUMBER        NOT NULL,
  fk_incarcare          NUMBER        NOT NULL,
  fk_nom_stare_registru NUMBER        NOT NULL,
  fk_nom_capitol        NUMBER,
  index_registru        VARCHAR2(36),
  data_registru         DATE,
  denumire_fisier       VARCHAR2(100) NOT NULL,
  continut_fisier       CLOB          NOT NULL,
  recipisa              BLOB,
  is_recipisa_semnata   NUMBER(1)     NOT NULL,
  PRIMARY KEY (ID_REGISTRU),
  CHECK (IS_RECIPISA_SEMNATA IN (0, 1))
);
CREATE INDEX IDX_REGISTRU_DATA_REGISTRU ON REGISTRU (DATA_REGISTRU);
CREATE INDEX IDX_REGISTRU_FK_INCARCARE ON REGISTRU (FK_INCARCARE);
CREATE INDEX IDX_REGISTRU_FK_NOM_CAPITOL ON REGISTRU (FK_NOM_CAPITOL);
CREATE INDEX IDX_REGISTRU_FK_NOM_STARE_REG ON REGISTRU (FK_NOM_STARE_REGISTRU);
CREATE INDEX IDX_REGISTRU_INDEX_REGISTRU ON REGISTRU (INDEX_REGISTRU);
--create bitmap index IDX_REGISTRU_IS_RECIPISA_SEMN on REGISTRU (IS_RECIPISA_SEMNATA);
--alter table REGISTRU add foreign key (FK_NOM_CAPITOL)references RAN_REGISTRU_DEV.NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_INCARCARE) REFERENCES INCARCARE (ID_INCARCARE);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_STARE_REGISTRU) REFERENCES NOM_STARE_REGISTRU (ID_NOM_STARE_REGISTRU);


DROP TABLE IF EXISTS FLUX_REGISTRU;

CREATE TABLE FLUX_REGISTRU
(
  id_flux_registru      NUMBER NOT NULL,
  fk_registru           NUMBER NOT NULL,
  fk_nom_stare_registru NUMBER NOT NULL,
  data_stare            DATE   NOT NULL,
  mesaj_stare           VARCHAR2(4000),
  PRIMARY KEY (ID_FLUX_REGISTRU)
);
CREATE INDEX IDX_FLUX_REGISTRU_DATA_STARE ON FLUX_REGISTRU (DATA_STARE);
CREATE INDEX IDX_FLUX_REGISTRU_FK_REGISTRU ON FLUX_REGISTRU (FK_REGISTRU);
CREATE INDEX IDX_FLUX_REGIST_FK_NOM_ST_REG ON FLUX_REGISTRU (FK_NOM_STARE_REGISTRU);
ALTER TABLE FLUX_REGISTRU ADD FOREIGN KEY (FK_REGISTRU) REFERENCES REGISTRU (ID_REGISTRU);
ALTER TABLE FLUX_REGISTRU ADD FOREIGN KEY (FK_NOM_STARE_REGISTRU) REFERENCES NOM_STARE_REGISTRU (ID_NOM_STARE_REGISTRU);

DROP TABLE IF EXISTS UAT_CONFIG;

CREATE TABLE UAT_CONFIG
(
  id_uat_config             NUMBER              NOT NULL,
  fk_nom_uat                NUMBER              NOT NULL,
  is_notificare_rap         NUMBER(1)           NOT NULL,
  fk_nom_sursa_registru     NUMBER,
  is_mod_transmitere_manual NUMBER(1) DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID_UAT_CONFIG),
  UNIQUE UK_UAT_CONFIG_FK_NOM_UAT (FK_NOM_UAT),
  CHECK (IS_MOD_TRANSMITERE_MANUAL IN (0, 1))
);

CREATE INDEX IDX_UAT_CONFIG_IS_MOD_TRAN_MAN ON UAT_CONFIG (IS_MOD_TRANSMITERE_MANUAL);
--alter table UAT_CONFIG add foreign key (FK_NOM_SURSA_REGISTRU) references RAN_REGISTRU_DEV.NOM_SURSA_REGISTRU (ID_NOM_SURSA_REGISTRU);
--alter table UAT_CONFIG add foreign key (FK_NOM_UAT) references RAN_REGISTRU_DEV.NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS NOM_TIP_ACT;

CREATE TABLE NOM_TIP_ACT
(
  id_nom_tip_act     NUMBER        NOT NULL,
  cod                VARCHAR2(10)  NOT NULL,
  denumire           VARCHAR2(100) NOT NULL,
  descriere          VARCHAR2(500),
  data_start         DATE          NOT NULL,
  data_stop          DATE,
  base_id            NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_TIP_ACT)
);
CREATE INDEX IDX_NOM_TIP_ACT_BASE_ID ON NOM_TIP_ACT (BASE_ID);
CREATE INDEX IDX_NOM_TIP_ACT_COD ON NOM_TIP_ACT (COD);
CREATE INDEX IDX_NOM_TIP_ACT_DAT_START_STOP ON NOM_TIP_ACT (DATA_START, DATA_STOP);
CREATE INDEX IDX_NOM_TIP_ACT_LMD ON NOM_TIP_ACT (LAST_MODIFIED_DATE);

DROP TABLE IF EXISTS ACT;

CREATE TABLE ACT
(
  id_act             NUMBER       NOT NULL,
  fk_nom_tip_act     NUMBER       NOT NULL,
  fk_nom_judet       NUMBER,
  numar_act          VARCHAR2(20) NOT NULL,
  data_act           DATE         NOT NULL,
  emitent            VARCHAR2(200),
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ACT)
);
CREATE INDEX IDX_ACT_FK_NOM_TIP_ACT ON ACT (FK_NOM_TIP_ACT);
CREATE INDEX IDX_ACT_LMD ON ACT (LAST_MODIFIED_DATE);
ALTER TABLE ACT ADD FOREIGN KEY (FK_NOM_TIP_ACT) REFERENCES NOM_TIP_ACT (ID_NOM_TIP_ACT);

DROP TABLE IF EXISTS NOM_JUDET;
CREATE TABLE NOM_JUDET
(
  id_nom_judet       NUMBER       NOT NULL,
  cod_alfa           VARCHAR2(2)  NOT NULL,
  cod_siruta         NUMBER(6)    NOT NULL,
  denumire           VARCHAR2(50) NOT NULL,
  data_start         DATE         NOT NULL,
  data_stop          DATE,
  base_id            NUMBER,
  uid_cms            NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_JUDET)
);
CREATE INDEX IDX_NOM_JUDET_BASE_ID ON NOM_JUDET (BASE_ID);
CREATE INDEX IDX_NOM_JUDET_COD_ALFA ON NOM_JUDET (COD_ALFA);
CREATE INDEX IDX_NOM_JUDET_COD_SIRUTA ON NOM_JUDET (COD_SIRUTA);
CREATE INDEX IDX_NOM_JUDET_DATA_START_STOP ON NOM_JUDET (DATA_START, DATA_STOP);
CREATE INDEX IDX_NOM_JUDET_LMD ON NOM_JUDET (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_JUDET_UID_CMS ON NOM_JUDET (UID_CMS);

DROP TABLE IF EXISTS NOM_UAT;
CREATE TABLE NOM_UAT
(
  id_nom_uat         NUMBER       NOT NULL,
  fk_nom_judet       NUMBER       NOT NULL,
  cod_siruta         NUMBER(6)    NOT NULL,
  denumire           VARCHAR2(50) NOT NULL,
  data_start         DATE         NOT NULL,
  data_stop          DATE,
  base_id            NUMBER,
  uid_cms            NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_UAT)
);
CREATE INDEX IDX_NOM_UAT_BASE_ID ON NOM_UAT (BASE_ID);
CREATE INDEX IDX_NOM_UAT_COD_SIRUTA ON NOM_UAT (COD_SIRUTA);
CREATE INDEX IDX_NOM_UAT_DATA_START_STOP ON NOM_UAT (DATA_START, DATA_STOP);
CREATE INDEX IDX_NOM_UAT_FK_NOM_JUDET ON NOM_UAT (FK_NOM_JUDET);
CREATE INDEX IDX_NOM_UAT_LMD ON NOM_UAT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_UAT_UID_CMS ON NOM_UAT (UID_CMS);

ALTER TABLE NOM_UAT ADD FOREIGN KEY (FK_NOM_JUDET) REFERENCES NOM_JUDET (ID_NOM_JUDET);

DROP TABLE IF EXISTS NOM_LOCALITATE;
CREATE TABLE NOM_LOCALITATE
(
  id_nom_localitate  NUMBER       NOT NULL,
  fk_nom_uat         NUMBER       NOT NULL,
  tip                NUMBER(2)    NOT NULL,
  cod_siruta         NUMBER(6)    NOT NULL,
  denumire           VARCHAR2(50) NOT NULL,
  data_start         DATE         NOT NULL,
  data_stop          DATE,
  base_id            NUMBER,
  uid_cms            NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_LOCALITATE)
);
CREATE INDEX IDX_NOM_LOCALITATE_BASE_ID ON NOM_LOCALITATE (BASE_ID);
CREATE INDEX IDX_NOM_LOCALITATE_COD_SIRUTA ON NOM_LOCALITATE (COD_SIRUTA);
CREATE INDEX IDX_NOM_LOCALITATE_FK_NOM_UAT ON NOM_LOCALITATE (FK_NOM_UAT);
CREATE INDEX IDX_NOM_LOCALITATE_LMD ON NOM_LOCALITATE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_LOCALITATE_UID_CMS ON NOM_LOCALITATE (UID_CMS);
CREATE INDEX IDX_NOM_LOC_DATA_START_STOP ON NOM_LOCALITATE (DATA_START, DATA_STOP);

ALTER TABLE NOM_LOCALITATE ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS NOM_TIP_DETINATOR;

CREATE TABLE NOM_TIP_DETINATOR
(
  id_nom_tip_detinator NUMBER        NOT NULL,
  cod                  VARCHAR2(10)  NOT NULL,
  denumire             VARCHAR2(100) NOT NULL,
  descriere            VARCHAR2(500),
  data_start           DATE          NOT NULL,
  data_stop            DATE,
  base_id              NUMBER,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_NOM_TIP_DETINATOR)
);
CREATE INDEX IDX_NOM_TIP_DETINATOR_BASE_ID ON NOM_TIP_DETINATOR (BASE_ID);
CREATE INDEX IDX_NOM_TIP_DETINATOR_COD ON NOM_TIP_DETINATOR (COD);
CREATE INDEX IDX_NOM_TIP_DETINATOR_LMD ON NOM_TIP_DETINATOR (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_TIP_DET_DAT_START_STOP ON NOM_TIP_DETINATOR (DATA_START, DATA_STOP);


DROP TABLE IF EXISTS NOM_TIP_EXPLOATATIE;
CREATE TABLE NOM_TIP_EXPLOATATIE
(
  id_nom_tip_exploatatie NUMBER        NOT NULL,
  cod                    VARCHAR2(10),
  denumire               VARCHAR2(150) NOT NULL,
  descriere              VARCHAR2(500),
  cod_rand               NUMBER(2)     NOT NULL,
  tip_persoana           NUMBER(1)     NOT NULL,
  data_start             DATE          NOT NULL,
  data_stop              DATE,
  base_id                NUMBER,
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_NOM_TIP_EXPLOATATIE),
  CHECK (TIP_PERSOANA IN (1, 2))
);
CREATE INDEX IDX_NOM_TIP_EXPLOATATIE_COD ON NOM_TIP_EXPLOATATIE (COD);
CREATE INDEX IDX_NOM_TIP_EXPLOATIE_LMD ON NOM_TIP_EXPLOATATIE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_TIP_EXPLOAT_BASE_ID ON NOM_TIP_EXPLOATATIE (BASE_ID);
CREATE INDEX IDX_NOM_TIP_EXPLOAT_COD_RAND ON NOM_TIP_EXPLOATATIE (COD_RAND);
CREATE INDEX IDX_NOM_TIP_EXPLOAT_TIP_PERS ON NOM_TIP_EXPLOATATIE (TIP_PERSOANA);
CREATE INDEX IDX_NOM_TIP_EXPL_DATA_STRT_STP ON NOM_TIP_EXPLOATATIE (DATA_START, DATA_STOP);


DROP TABLE IF EXISTS GOSPODARIE;
CREATE TABLE GOSPODARIE
(
  id_gospodarie            NUMBER       NOT NULL,
  fk_nom_judet             NUMBER       NOT NULL,
  fk_nom_uat               NUMBER       NOT NULL,
  fk_nom_localitate        NUMBER       NOT NULL,
  fk_nom_tip_detinator     NUMBER       NOT NULL,
  fk_nom_tip_exploatatie   NUMBER       NOT NULL,
  identificator            VARCHAR2(30) NOT NULL,
  ident_volum              VARCHAR2(20) NOT NULL,
  ident_pozitie_curenta    NUMBER(10)   NOT NULL,
  ident_pozitie_anterioara NUMBER(10)   NOT NULL,
  ident_rol_nominal_unic   NUMBER(10),
  cod_exploatatie          VARCHAR2(30),
  nr_unic_identificare     VARCHAR2(30),
  is_activ                 NUMBER(1)    NOT NULL,
  insert_date              TIMESTAMP,
  last_modified_date       TIMESTAMP,
  PRIMARY KEY (ID_GOSPODARIE),
  CHECK (IS_ACTIV IN (0, 1))
);
CREATE INDEX IDX_GOSPODARIE_COD_EXPLOATATIE ON GOSPODARIE (COD_EXPLOATATIE);
CREATE INDEX IDX_GOSPODARIE_FK_NOM_JUDET ON GOSPODARIE (FK_NOM_JUDET);
CREATE INDEX IDX_GOSPODARIE_FK_NOM_LOCALIT ON GOSPODARIE (FK_NOM_LOCALITATE);
CREATE INDEX IDX_GOSPODARIE_FK_NOM_TIP_DET ON GOSPODARIE (FK_NOM_TIP_DETINATOR);
CREATE INDEX IDX_GOSPODARIE_FK_NOM_TIP_EXPL ON GOSPODARIE (FK_NOM_TIP_EXPLOATATIE);
CREATE INDEX IDX_GOSPODARIE_FK_NOM_UAT ON GOSPODARIE (FK_NOM_UAT);
CREATE INDEX IDX_GOSPODARIE_IDENTIFICATOR ON GOSPODARIE (IDENTIFICATOR);
--create bitmap index IDX_GOSPODARIE_IS_ACTIV on GOSPODARIE (IS_ACTIV)create index IDX_GOSPODARIE_LMD on GOSPODARIE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_GOSPODARIE_NR_UNIC_IDENTIF ON GOSPODARIE (NR_UNIC_IDENTIFICARE);

ALTER TABLE GOSPODARIE ADD FOREIGN KEY (FK_NOM_JUDET) REFERENCES NOM_JUDET (ID_NOM_JUDET);
ALTER TABLE GOSPODARIE ADD FOREIGN KEY (FK_NOM_LOCALITATE) REFERENCES NOM_LOCALITATE (ID_NOM_LOCALITATE);
ALTER TABLE GOSPODARIE ADD FOREIGN KEY (FK_NOM_TIP_DETINATOR) REFERENCES NOM_TIP_DETINATOR (ID_NOM_TIP_DETINATOR);
ALTER TABLE GOSPODARIE ADD FOREIGN KEY (FK_NOM_TIP_EXPLOATATIE) REFERENCES NOM_TIP_EXPLOATATIE (ID_NOM_TIP_EXPLOATATIE);
ALTER TABLE GOSPODARIE ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS NOM_CAPITOL;
CREATE TABLE NOM_CAPITOL
(
  id_nom_capitol NUMBER        NOT NULL,
  cod            VARCHAR2(20)  NOT NULL,
  denumire       VARCHAR2(200) NOT NULL,
  descriere      VARCHAR2(500),
  alias          VARCHAR2(50),
  data_start     DATE          NOT NULL,
  data_stop      DATE,
  base_id        NUMBER        NOT NULL,
  PRIMARY KEY (ID_NOM_CAPITOL)
);
CREATE INDEX IDX_NOM_CAPITOL_BASE_ID ON NOM_CAPITOL (BASE_ID);
CREATE INDEX IDX_NOM_CAPITOL_COD ON NOM_CAPITOL (COD);
CREATE INDEX IDX_NOM_CAP_DATA_START_STOP ON NOM_CAPITOL (DATA_START, DATA_STOP);

DROP TABLE IF EXISTS NOM_CATEGORIE_FOLOSINTA;

CREATE TABLE NOM_CATEGORIE_FOLOSINTA
(
  id_nom_categorie_folosinta NUMBER        NOT NULL,
  fk_nom_categorie_folosinta NUMBER,
  cod                        VARCHAR2(10)  NOT NULL,
  denumire                   VARCHAR2(100) NOT NULL,
  descriere                  VARCHAR2(500),
  PRIMARY KEY (ID_NOM_CATEGORIE_FOLOSINTA),
  UNIQUE UK_NOM_CATEGORIE_FOLOSINTA_COD (COD)
);
CREATE INDEX IDX_NOM_CAT_FOL_FK_NOM_CAT_FOL ON NOM_CATEGORIE_FOLOSINTA (FK_NOM_CATEGORIE_FOLOSINTA);

DROP TABLE IF EXISTS CAP_CATEGORIE_FOLOSINTA;
CREATE TABLE CAP_CATEGORIE_FOLOSINTA
(
  id_cap_categorie_folosinta NUMBER        NOT NULL,
  fk_cap_categorie_folosinta NUMBER,
  fk_nom_capitol             NUMBER        NOT NULL,
  fk_nom_categorie_folosinta NUMBER,
  cod                        VARCHAR2(10),
  denumire                   VARCHAR2(100) NOT NULL,
  descriere                  VARCHAR2(500),
  cod_rand                   NUMBER(2)     NOT NULL,
  is_formula                 NUMBER(1)     NOT NULL,
  tip_formula_relatie        NUMBER(1)     NOT NULL,
  data_start                 DATE          NOT NULL,
  data_stop                  DATE,
  base_id                    NUMBER        NOT NULL,
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_CAP_CATEGORIE_FOLOSINTA),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_CATEG_FOLOSINTA_COD ON CAP_CATEGORIE_FOLOSINTA (COD);
CREATE INDEX IDX_CAP_CATEG_FOLOSINTA_LMD ON CAP_CATEGORIE_FOLOSINTA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_CATEG_FOLOS_BASE_ID ON CAP_CATEGORIE_FOLOSINTA (BASE_ID);
CREATE INDEX IDX_CAP_CATEG_FOLOS_COD_RAND ON CAP_CATEGORIE_FOLOSINTA (COD_RAND);
CREATE INDEX IDX_CAP_CATEG_FOL_FK_NOM_CAP ON CAP_CATEGORIE_FOLOSINTA (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_CAT_FOL_DAT_START_STOP ON CAP_CATEGORIE_FOLOSINTA (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_CAT_FOL_FK_CAP_CAT_FOL ON CAP_CATEGORIE_FOLOSINTA (FK_CAP_CATEGORIE_FOLOSINTA);
CREATE INDEX IDX_CAP_CAT_FOL_FK_NOM_CAT_FOL ON CAP_CATEGORIE_FOLOSINTA (FK_NOM_CATEGORIE_FOLOSINTA);

ALTER TABLE CAP_CATEGORIE_FOLOSINTA ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_CATEGORIE_FOLOSINTA ADD FOREIGN KEY (FK_CAP_CATEGORIE_FOLOSINTA) REFERENCES CAP_CATEGORIE_FOLOSINTA (ID_CAP_CATEGORIE_FOLOSINTA);
ALTER TABLE CAP_CATEGORIE_FOLOSINTA ADD FOREIGN KEY (FK_NOM_CATEGORIE_FOLOSINTA) REFERENCES NOM_CATEGORIE_FOLOSINTA (ID_NOM_CATEGORIE_FOLOSINTA);

DROP TABLE IF EXISTS NOM_MODALITATE_DETINERE;

CREATE TABLE NOM_MODALITATE_DETINERE
(
  id_nom_modalitate_detinere NUMBER        NOT NULL,
  cod                        VARCHAR2(10)  NOT NULL,
  denumire                   VARCHAR2(100) NOT NULL,
  descriere                  VARCHAR2(500),
  data_start                 DATE          NOT NULL,
  data_stop                  DATE,
  base_id                    NUMBER        NOT NULL,
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_NOM_MODALITATE_DETINERE)
);
CREATE INDEX IDX_NOM_MODALITAT_DETINERE_COD ON NOM_MODALITATE_DETINERE (COD);
CREATE INDEX IDX_NOM_MODALITAT_DETINERE_LMD ON NOM_MODALITATE_DETINERE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_MODAL_DETINERE_BASE_ID ON NOM_MODALITATE_DETINERE (BASE_ID);
CREATE INDEX IDX_NOM_MOD_DET_DAT_START_STOP ON NOM_MODALITATE_DETINERE (DATA_START, DATA_STOP);

DROP TABLE IF EXISTS PARCELA_TEREN;

CREATE TABLE PARCELA_TEREN
(
  id_parcela_teren           NUMBER        NOT NULL,
  fk_gospodarie              NUMBER        NOT NULL,
  fk_cap_categorie_folosinta NUMBER        NOT NULL,
  fk_nom_modalitate_detinere NUMBER,
  fk_act_instrainare         NUMBER,
  fk_nom_judet               NUMBER,
  an                         NUMBER(4)     NOT NULL,
  denumire                   VARCHAR2(100) NOT NULL,
  cod_rand                   NUMBER(2)     NOT NULL,
  intravilan_extravilan      NUMBER(1)     NOT NULL,
  suprafata                  NUMBER(15)    NOT NULL,
  nr_bloc_fizic              VARCHAR2(20),
  mentiune                   VARCHAR2(500),
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_PARCELA_TEREN),
  CHECK (INTRAVILAN_EXTRAVILAN IN (1, 2))
);
CREATE INDEX IDX_PARCELA_TEREN_AN ON PARCELA_TEREN (AN);
CREATE INDEX IDX_PARCELA_TEREN_FK_GOSPOD ON PARCELA_TEREN (FK_GOSPODARIE);
CREATE INDEX IDX_PARCELA_TEREN_LMD ON PARCELA_TEREN (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PARC_TEREN_FK_ACT_INSTRAIN ON PARCELA_TEREN (FK_ACT_INSTRAINARE);
CREATE INDEX IDX_PARC_TEREN_FK_CAP_CAT_FOL ON PARCELA_TEREN (FK_CAP_CATEGORIE_FOLOSINTA);
CREATE INDEX IDX_PARC_TEREN_FK_NOM_MOD_DET ON PARCELA_TEREN (FK_NOM_MODALITATE_DETINERE);

ALTER TABLE PARCELA_TEREN ADD FOREIGN KEY (FK_ACT_INSTRAINARE) REFERENCES ACT (ID_ACT);
ALTER TABLE PARCELA_TEREN ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE PARCELA_TEREN ADD FOREIGN KEY (FK_CAP_CATEGORIE_FOLOSINTA) REFERENCES CAP_CATEGORIE_FOLOSINTA (ID_CAP_CATEGORIE_FOLOSINTA);
ALTER TABLE PARCELA_TEREN ADD FOREIGN KEY (FK_NOM_MODALITATE_DETINERE) REFERENCES NOM_MODALITATE_DETINERE (ID_NOM_MODALITATE_DETINERE);

DROP TABLE IF EXISTS ACT_DETINERE;
CREATE TABLE ACT_DETINERE
(
  id_act_detinere    NUMBER    NOT NULL,
  fk_parcela_teren   NUMBER    NOT NULL,
  fk_act             NUMBER    NOT NULL,
  fk_nom_judet       NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ACT_DETINERE)
);
CREATE INDEX IDX_ACT_DETINERE_FK_ACT ON ACT_DETINERE (FK_ACT);
CREATE INDEX IDX_ACT_DETINERE_LMD ON ACT_DETINERE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_ACT_DETIN_FK_PARCELA_TEREN ON ACT_DETINERE (FK_PARCELA_TEREN);

ALTER TABLE ACT_DETINERE ADD FOREIGN KEY (FK_ACT) REFERENCES ACT (ID_ACT);
ALTER TABLE ACT_DETINERE ADD FOREIGN KEY (FK_PARCELA_TEREN) REFERENCES PARCELA_TEREN (ID_PARCELA_TEREN);

DROP TABLE IF EXISTS NOM_TARA;
CREATE TABLE NOM_TARA
(
  id_nom_tara        NUMBER        NOT NULL,
  cod_alfa_2         VARCHAR2(2),
  cod_alfa_3         VARCHAR2(3),
  cod_numeric        NUMBER(3),
  denumire           VARCHAR2(100) NOT NULL,
  data_start         DATE          NOT NULL,
  data_stop          DATE,
  base_id            NUMBER        NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_TARA)
);
CREATE INDEX IDX_NOM_TARA_BASE_ID ON NOM_TARA (BASE_ID);
CREATE INDEX IDX_NOM_TARA_COD_ALFA_2 ON NOM_TARA (COD_ALFA_2);
CREATE INDEX IDX_NOM_TARA_COD_ALFA_3 ON NOM_TARA (COD_ALFA_3);
CREATE INDEX IDX_NOM_TARA_COD_NUMERIC ON NOM_TARA (COD_NUMERIC);
CREATE INDEX IDX_NOM_TARA_DATA_START_STOP ON NOM_TARA (DATA_START, DATA_STOP);
CREATE INDEX IDX_NOM_TARA_LMD ON NOM_TARA (LAST_MODIFIED_DATE);


DROP TABLE IF EXISTS ADRESA;
CREATE TABLE ADRESA
(
  id_adresa           NUMBER    NOT NULL,
  fk_nom_tara         NUMBER    NOT NULL,
  fk_nom_judet        NUMBER,
  fk_nom_uat          NUMBER,
  fk_nom_localitate   NUMBER,
  uid_renns           VARCHAR2(30),
  strada              VARCHAR2(50),
  nr_strada           VARCHAR2(10),
  bloc                VARCHAR2(10),
  scara               VARCHAR2(10),
  etaj                NUMBER(3),
  apartament          VARCHAR2(10),
  exceptie_adresa     VARCHAR2(500),
  data_start          DATE      NOT NULL,
  data_stop           DATE,
  base_id             NUMBER,
  last_modified_date  TIMESTAMP,
  renns_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ADRESA)
);
CREATE INDEX IDX_ADRESA_BASE_ID ON ADRESA (BASE_ID);
CREATE INDEX IDX_ADRESA_DATA_START_STOP ON ADRESA (DATA_START, DATA_STOP);
CREATE INDEX IDX_ADRESA_FK_NOM_JUDET ON ADRESA (FK_NOM_JUDET);
CREATE INDEX IDX_ADRESA_FK_NOM_LOCALITATE ON ADRESA (FK_NOM_LOCALITATE);
CREATE INDEX IDX_ADRESA_FK_NOM_TARA ON ADRESA (FK_NOM_TARA);
CREATE INDEX IDX_ADRESA_FK_NOM_UAT ON ADRESA (FK_NOM_UAT);
CREATE INDEX IDX_ADRESA_LMD ON ADRESA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_ADRESA_UID_RENNS ON ADRESA (UID_RENNS);

ALTER TABLE ADRESA ADD FOREIGN KEY (FK_NOM_JUDET) REFERENCES NOM_JUDET (ID_NOM_JUDET);
ALTER TABLE ADRESA ADD FOREIGN KEY (FK_NOM_LOCALITATE) REFERENCES NOM_LOCALITATE (ID_NOM_LOCALITATE);
ALTER TABLE ADRESA ADD FOREIGN KEY (FK_NOM_TARA) REFERENCES NOM_TARA (ID_NOM_TARA);
ALTER TABLE ADRESA ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS NOM_TIP_ADRESA;
CREATE TABLE NOM_TIP_ADRESA
(
  id_nom_tip_adresa NUMBER        NOT NULL,
  cod               VARCHAR2(10)  NOT NULL,
  denumire          VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_ADRESA),
  UNIQUE UK_TIP_ADRESA_COD (COD)
);

DROP TABLE IF EXISTS ADRESA_GOSPODARIE;
CREATE TABLE ADRESA_GOSPODARIE
(
  id_adresa_gospodarie NUMBER    NOT NULL,
  fk_gospodarie        NUMBER    NOT NULL,
  fk_nom_tip_adresa    NUMBER    NOT NULL,
  fk_adresa            NUMBER    NOT NULL,
  fk_nom_judet         NUMBER,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_ADRESA_GOSPODARIE)
);
CREATE INDEX IDX_ADRESA_GOSPOD_FK_ADRESA ON ADRESA_GOSPODARIE (FK_ADRESA);
CREATE INDEX IDX_ADRESA_GOSPOD_FK_GOSPOD ON ADRESA_GOSPODARIE (FK_GOSPODARIE);
CREATE INDEX IDX_ADRESA_GOSP_FK_NOM_TIP_ADR ON ADRESA_GOSPODARIE (FK_NOM_TIP_ADRESA);

ALTER TABLE ADRESA_GOSPODARIE ADD FOREIGN KEY (FK_ADRESA) REFERENCES ADRESA (ID_ADRESA);
ALTER TABLE ADRESA_GOSPODARIE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE ADRESA_GOSPODARIE ADD FOREIGN KEY (FK_NOM_TIP_ADRESA) REFERENCES NOM_TIP_ADRESA (ID_NOM_TIP_ADRESA);

DROP TABLE IF EXISTS NOM_SPECIE_ANIMAL;

CREATE TABLE NOM_SPECIE_ANIMAL
(
  id_nom_specie_animal NUMBER        NOT NULL,
  fk_nom_specie_animal NUMBER,
  cod                  VARCHAR2(10)  NOT NULL,
  denumire             VARCHAR2(100) NOT NULL,
  descriere            VARCHAR2(500),
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_NOM_SPECIE_ANIMAL),
  UNIQUE UK_NOM_SPECIE_ANIMAL_COD (COD)
);
CREATE INDEX IDX_NOM_SPECIE_ANIMAL_LMD ON NOM_SPECIE_ANIMAL (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_SP_ANIM_FK_NOM_SP_ANIM ON NOM_SPECIE_ANIMAL (FK_NOM_SPECIE_ANIMAL);

DROP TABLE IF EXISTS NOM_TIP_UNITATE_MASURA;
CREATE TABLE NOM_TIP_UNITATE_MASURA
(
  id_nom_tip_unitate_masura NUMBER        NOT NULL,
  cod                       VARCHAR2(10)  NOT NULL,
  denumire                  VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_UNITATE_MASURA),
  UNIQUE UK_NOM_TIP_UNITATE_MASURA_COD (COD)
);

DROP TABLE IF EXISTS NOM_UNITATE_MASURA;

CREATE TABLE NOM_UNITATE_MASURA
(
  id_nom_unitate_masura     NUMBER        NOT NULL,
  fk_nom_tip_unitate_masura NUMBER        NOT NULL,
  cod                       VARCHAR2(10)  NOT NULL,
  denumire                  VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_UNITATE_MASURA),
  UNIQUE UK_NOM_UNITATE_MASURA_COD (COD)
);
CREATE INDEX IDX_NOM_UN_MAS_FK_NOM_TIP_UN_M ON NOM_UNITATE_MASURA (FK_NOM_TIP_UNITATE_MASURA);

ALTER TABLE NOM_UNITATE_MASURA ADD FOREIGN KEY (FK_NOM_TIP_UNITATE_MASURA) REFERENCES NOM_TIP_UNITATE_MASURA (ID_NOM_TIP_UNITATE_MASURA);

DROP TABLE IF EXISTS CAP_ANIMAL_PROD;

CREATE TABLE CAP_ANIMAL_PROD
(
  id_cap_animal_prod    NUMBER        NOT NULL,
  fk_cap_animal_prod    NUMBER,
  fk_nom_capitol        NUMBER        NOT NULL,
  fk_nom_unitate_masura NUMBER,
  fk_nom_specie_animal  NUMBER,
  cod                   VARCHAR2(10),
  denumire              VARCHAR2(100) NOT NULL,
  descriere             VARCHAR2(500),
  cod_rand              NUMBER(2),
  is_formula            NUMBER(1)     NOT NULL,
  tip_operand_relatie   NUMBER(1),
  ordin_multiplicare    NUMBER(5),
  data_start            DATE          NOT NULL,
  data_stop             DATE,
  base_id               NUMBER        NOT NULL,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_CAP_ANIMAL_PROD),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_OPERAND_RELATIE IS NULL OR (TIP_OPERAND_RELATIE IN (1, 2)))
);
CREATE INDEX IDX_CAP_ANIMAL_PROD_BASE_ID ON CAP_ANIMAL_PROD (BASE_ID);
CREATE INDEX IDX_CAP_ANIMAL_PROD_COD ON CAP_ANIMAL_PROD (COD);
CREATE INDEX IDX_CAP_ANIMAL_PROD_COD_RAND ON CAP_ANIMAL_PROD (COD_RAND);
CREATE INDEX IDX_CAP_ANIMAL_PROD_FK_NOM_CAP ON CAP_ANIMAL_PROD (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_ANIMAL_PROD_LMD ON CAP_ANIMAL_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_ANIM_PROD_FK_NOM_SP_AN ON CAP_ANIMAL_PROD (FK_NOM_SPECIE_ANIMAL);
CREATE INDEX IDX_CAP_ANIM_PR_DAT_START_STOP ON CAP_ANIMAL_PROD (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_ANIM_PR_FK_CAP_ANIM_PR ON CAP_ANIMAL_PROD (FK_CAP_ANIMAL_PROD);
CREATE INDEX IDX_CAP_ANIM_PR_FK_NOM_UN_MAS ON CAP_ANIMAL_PROD (FK_NOM_UNITATE_MASURA);

ALTER TABLE CAP_ANIMAL_PROD ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_ANIMAL_PROD ADD FOREIGN KEY (FK_CAP_ANIMAL_PROD) REFERENCES CAP_ANIMAL_PROD (ID_CAP_ANIMAL_PROD);
ALTER TABLE CAP_ANIMAL_PROD ADD FOREIGN KEY (FK_NOM_SPECIE_ANIMAL) REFERENCES NOM_SPECIE_ANIMAL (ID_NOM_SPECIE_ANIMAL);
ALTER TABLE CAP_ANIMAL_PROD ADD FOREIGN KEY (FK_NOM_UNITATE_MASURA) REFERENCES NOM_UNITATE_MASURA (ID_NOM_UNITATE_MASURA);


DROP TABLE IF EXISTS ANIMAL_PROD;
CREATE TABLE ANIMAL_PROD
(
  id_animal_prod     NUMBER        NOT NULL,
  fk_nom_uat         NUMBER        NOT NULL,
  fk_cap_animal_prod NUMBER        NOT NULL,
  fk_nom_judet       NUMBER,
  an                 NUMBER(4)     NOT NULL,
  valoare            NUMBER(15, 2) NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ANIMAL_PROD)
);
CREATE INDEX IDX_ANIMAL_PROD_AN ON ANIMAL_PROD (AN);
CREATE INDEX IDX_ANIMAL_PROD_FK_NOM_UAT ON ANIMAL_PROD (FK_NOM_UAT);
CREATE INDEX IDX_ANIMAL_PROD_LMD ON ANIMAL_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_ANIM_PROD_FK_CAP_ANIM_PROD ON ANIMAL_PROD (FK_CAP_ANIMAL_PROD);

ALTER TABLE ANIMAL_PROD ADD FOREIGN KEY (FK_CAP_ANIMAL_PROD) REFERENCES CAP_ANIMAL_PROD (ID_CAP_ANIMAL_PROD);
ALTER TABLE ANIMAL_PROD ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS CAP_APLICARE_INGRASAMANT;

CREATE TABLE CAP_APLICARE_INGRASAMANT
(
  id_cap_aplicare_ingrasamant NUMBER        NOT NULL,
  fk_cap_aplicare_ingrasamant NUMBER,
  fk_nom_capitol              NUMBER        NOT NULL,
  cod                         VARCHAR2(10),
  denumire                    VARCHAR2(100) NOT NULL,
  descriere                   VARCHAR2(500),
  cod_rand                    NUMBER(2)     NOT NULL,
  is_formula                  NUMBER(1)     NOT NULL,
  tip_formula_relatie         NUMBER(1)     NOT NULL,
  data_start                  DATE          NOT NULL,
  data_stop                   DATE,
  base_id                     NUMBER        NOT NULL,
  last_modified_date          TIMESTAMP,
  PRIMARY KEY (ID_CAP_APLICARE_INGRASAMANT),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_APLIC_INGRASAMANT_COD ON CAP_APLICARE_INGRASAMANT (COD);
CREATE INDEX IDX_CAP_APLIC_INGRASAMANT_LMD ON CAP_APLICARE_INGRASAMANT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_APLIC_INGRAS_BASE_ID ON CAP_APLICARE_INGRASAMANT (BASE_ID);
CREATE INDEX IDX_CAP_APLIC_INGRAS_COD_RAND ON CAP_APLICARE_INGRASAMANT (COD_RAND);
CREATE INDEX IDX_CAP_APLIC_INGR_FK_NOM_CAP ON CAP_APLICARE_INGRASAMANT (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_APL_ING_DAT_START_STOP ON CAP_APLICARE_INGRASAMANT (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_APL_ING_FK_CAP_APL_ING ON CAP_APLICARE_INGRASAMANT (FK_CAP_APLICARE_INGRASAMANT);

ALTER TABLE CAP_APLICARE_INGRASAMANT ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_APLICARE_INGRASAMANT ADD FOREIGN KEY (FK_CAP_APLICARE_INGRASAMANT) REFERENCES CAP_APLICARE_INGRASAMANT (ID_CAP_APLICARE_INGRASAMANT);

DROP TABLE IF EXISTS APLICARE_INGRASAMANT;
CREATE TABLE APLICARE_INGRASAMANT
(
  id_aplicare_ingrasamant     NUMBER     NOT NULL,
  fk_gospodarie               NUMBER     NOT NULL,
  fk_cap_aplicare_ingrasamant NUMBER     NOT NULL,
  fk_nom_judet                NUMBER,
  an                          NUMBER(4)  NOT NULL,
  suprafata                   NUMBER(15) NOT NULL,
  cantitate                   NUMBER(10) NOT NULL,
  last_modified_date          TIMESTAMP,
  PRIMARY KEY (ID_APLICARE_INGRASAMANT)
);
CREATE INDEX IDX_APLICARE_INGRASAMANT_AN ON APLICARE_INGRASAMANT (AN);
CREATE INDEX IDX_APLICARE_INGRASAMANT_LMD ON APLICARE_INGRASAMANT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_APLIC_INGRASAMENT_FK_GOSP ON APLICARE_INGRASAMANT (FK_GOSPODARIE);
CREATE INDEX IDX_APL_INGRAS_FK_CAP_APL_INGR ON APLICARE_INGRASAMANT (FK_CAP_APLICARE_INGRASAMANT);

ALTER TABLE APLICARE_INGRASAMANT ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE APLICARE_INGRASAMANT ADD FOREIGN KEY (FK_CAP_APLICARE_INGRASAMANT) REFERENCES CAP_APLICARE_INGRASAMANT (ID_CAP_APLICARE_INGRASAMANT);

DROP TABLE IF EXISTS ATESTAT;
CREATE TABLE ATESTAT
(
  id_atestat              NUMBER       NOT NULL,
  fk_gospodarie           NUMBER       NOT NULL,
  fk_act_aviz_consultativ NUMBER,
  fk_nom_judet            NUMBER,
  serie_numar_atestat     VARCHAR2(20) NOT NULL,
  data_eliberare_atestat  DATE         NOT NULL,
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_ATESTAT)
);
CREATE INDEX IDX_ATESTAT_FK_ACT_AVIZ_CONS ON ATESTAT (FK_ACT_AVIZ_CONSULTATIV);
CREATE INDEX IDX_ATESTAT_FK_GOSPODARIE ON ATESTAT (FK_GOSPODARIE);
CREATE INDEX IDX_ATESTAT_LMD ON ATESTAT (LAST_MODIFIED_DATE);

ALTER TABLE ATESTAT ADD FOREIGN KEY (FK_ACT_AVIZ_CONSULTATIV) REFERENCES ACT (ID_ACT);
ALTER TABLE ATESTAT ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS ATESTAT_PRODUS;
CREATE TABLE ATESTAT_PRODUS
(
  id_atestat_produs  NUMBER        NOT NULL,
  fk_atestat         NUMBER        NOT NULL,
  denumire_produs    VARCHAR2(100) NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ATESTAT_PRODUS)
);

ALTER TABLE ATESTAT_PRODUS ADD FOREIGN KEY (FK_ATESTAT) REFERENCES ATESTAT (ID_ATESTAT);

DROP TABLE IF EXISTS ATESTAT_VIZA;
CREATE TABLE ATESTAT_VIZA
(
  id_atestat_viza    NUMBER    NOT NULL,
  fk_atestat         NUMBER    NOT NULL,
  numar_viza         NUMBER(2) NOT NULL,
  data_viza          DATE      NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_ATESTAT_VIZA)
);
CREATE INDEX IDX_ATESTAT_VIZA_LMD ON ATESTAT_VIZA (LAST_MODIFIED_DATE);

ALTER TABLE ATESTAT_VIZA ADD FOREIGN KEY (FK_ATESTAT) REFERENCES ATESTAT (ID_ATESTAT);

DROP TABLE IF EXISTS CAP_CATEGORIE_ANIMAL;
CREATE TABLE CAP_CATEGORIE_ANIMAL
(
  id_cap_categorie_animal NUMBER        NOT NULL,
  fk_cap_categorie_animal NUMBER,
  fk_nom_capitol          NUMBER        NOT NULL,
  fk_nom_specie_animal    NUMBER,
  cod                     VARCHAR2(10),
  denumire                VARCHAR2(250) NOT NULL,
  descriere               VARCHAR2(500),
  cod_rand                NUMBER(2)     NOT NULL,
  is_formula              NUMBER(1)     NOT NULL,
  tip_formula_relatie     NUMBER(1)     NOT NULL,
  data_start              DATE          NOT NULL,
  data_stop               DATE,
  base_id                 NUMBER        NOT NULL,
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_CAP_CATEGORIE_ANIMAL),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_CATEGORIE_ANIMAL_LMD ON CAP_CATEGORIE_ANIMAL (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_CATEG_ANIMAL_BASE_ID ON CAP_CATEGORIE_ANIMAL (BASE_ID);
CREATE INDEX IDX_CAP_CATEG_ANIMAL_COD_RAND ON CAP_CATEGORIE_ANIMAL (COD_RAND);
CREATE INDEX IDX_CAP_CAT_ANIMAL_FK_NOM_CAP ON CAP_CATEGORIE_ANIMAL (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_CAT_ANIM_DT_START_STOP ON CAP_CATEGORIE_ANIMAL (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_CAT_ANIM_FK_CAP_CAT_AN ON CAP_CATEGORIE_ANIMAL (FK_CAP_CATEGORIE_ANIMAL);
CREATE INDEX IDX_CAP_CAT_AN_FK_NOM_SPEC_AN ON CAP_CATEGORIE_ANIMAL (FK_NOM_SPECIE_ANIMAL);

ALTER TABLE CAP_CATEGORIE_ANIMAL ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_CATEGORIE_ANIMAL ADD FOREIGN KEY (FK_NOM_SPECIE_ANIMAL) REFERENCES NOM_SPECIE_ANIMAL (ID_NOM_SPECIE_ANIMAL);
ALTER TABLE CAP_CATEGORIE_ANIMAL ADD FOREIGN KEY (FK_CAP_CATEGORIE_ANIMAL) REFERENCES CAP_CATEGORIE_ANIMAL (ID_CAP_CATEGORIE_ANIMAL);

DROP TABLE IF EXISTS NOM_PLANTA_CULTURA;
CREATE TABLE NOM_PLANTA_CULTURA
(
  id_nom_planta_cultura NUMBER        NOT NULL,
  fk_nom_planta_cultura NUMBER,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  descriere             VARCHAR2(500),
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_NOM_PLANTA_CULTURA),
  UNIQUE UK_NOM_PLANTA_CULTURA_COD (COD)
);
CREATE INDEX IDX_NOM_PL_CULT_FK_NOM_PL_CULT ON NOM_PLANTA_CULTURA (FK_NOM_PLANTA_CULTURA);

ALTER TABLE NOM_PLANTA_CULTURA ADD FOREIGN KEY (FK_NOM_PLANTA_CULTURA) REFERENCES NOM_PLANTA_CULTURA (ID_NOM_PLANTA_CULTURA);

DROP TABLE IF EXISTS CAP_CULTURA;
CREATE TABLE CAP_CULTURA
(
  id_cap_cultura        NUMBER        NOT NULL,
  fk_cap_cultura        NUMBER,
  fk_nom_capitol        NUMBER        NOT NULL,
  fk_nom_planta_cultura NUMBER,
  cod                   VARCHAR2(10),
  denumire              VARCHAR2(250) NOT NULL,
  descriere             VARCHAR2(500),
  cod_rand              NUMBER(3)     NOT NULL,
  is_formula            NUMBER(1)     NOT NULL,
  tip_formula_relatie   NUMBER(1)     NOT NULL,
  data_start            DATE          NOT NULL,
  data_stop             DATE,
  base_id               NUMBER        NOT NULL,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_CAP_CULTURA),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_CULTURA_COD ON CAP_CULTURA (COD);
CREATE INDEX IDX_CAP_CULTURA_COD_RAND ON CAP_CULTURA (COD_RAND);
CREATE INDEX IDX_CAP_CULTURA_FK_CAP_CULTURA ON CAP_CULTURA (FK_CAP_CULTURA);
CREATE INDEX IDX_CAP_CULTURA_FK_NOM_CAPITOL ON CAP_CULTURA (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_CULTURA_LMD ON CAP_CULTURA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_CULT_DATA_START_STOP ON CAP_CULTURA (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_CULT_FK_NOM_PLANT_CULT ON CAP_CULTURA (FK_NOM_PLANTA_CULTURA);

ALTER TABLE CAP_CULTURA ADD FOREIGN KEY (FK_CAP_CULTURA) REFERENCES CAP_CULTURA (ID_CAP_CULTURA);
ALTER TABLE CAP_CULTURA ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_CULTURA ADD FOREIGN KEY (FK_NOM_PLANTA_CULTURA) REFERENCES NOM_PLANTA_CULTURA (ID_NOM_PLANTA_CULTURA);

DROP TABLE IF EXISTS CAP_CULTURA_PROD;
CREATE TABLE CAP_CULTURA_PROD
(
  id_cap_cultura_prod   NUMBER        NOT NULL,
  fk_cap_cultura_prod   NUMBER,
  fk_nom_capitol        NUMBER        NOT NULL,
  fk_nom_unitate_masura NUMBER        NOT NULL,
  fk_nom_planta_cultura NUMBER,
  cod                   VARCHAR2(10),
  denumire              VARCHAR2(250) NOT NULL,
  descriere             VARCHAR2(500),
  cod_rand              NUMBER(3)     NOT NULL,
  is_formula            NUMBER(1)     NOT NULL,
  tip_formula_relatie   NUMBER(1)     NOT NULL,
  is_suprafata          NUMBER(1)     NOT NULL,
  is_prod_medie         NUMBER(1)     NOT NULL,
  is_prod_total         NUMBER(1)     NOT NULL,
  data_start            DATE          NOT NULL,
  data_stop             DATE,
  base_id               NUMBER        NOT NULL,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_CAP_CULTURA_PROD),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (IS_SUPRAFATA IN (0, 1)),
  CHECK (IS_PROD_MEDIE IN (0, 1)),
  CHECK (IS_PROD_TOTAL IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_CULTURA_PROD_COD ON CAP_CULTURA_PROD (COD);
CREATE INDEX IDX_CAP_CULTURA_PROD_COD_RAND ON CAP_CULTURA_PROD (COD_RAND);
CREATE INDEX IDX_CAP_CULTURA_PROD_LMD ON CAP_CULTURA_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_CULTURA_PR_FK_NOM_CAP ON CAP_CULTURA_PROD (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_CULTURA_PR_FK_NOM_UN_M ON CAP_CULTURA_PROD (FK_NOM_UNITATE_MASURA);
CREATE INDEX IDX_CAP_CULT_PR_DAT_START_STOP ON CAP_CULTURA_PROD (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_CULT_PR_FK_CAP_CULT_PR ON CAP_CULTURA_PROD (FK_CAP_CULTURA_PROD);
CREATE INDEX IDX_CAP_CULT_PR_FK_NOM_PL_CULT ON CAP_CULTURA_PROD (FK_NOM_PLANTA_CULTURA);

ALTER TABLE CAP_CULTURA_PROD ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_CULTURA_PROD ADD FOREIGN KEY (FK_CAP_CULTURA_PROD) REFERENCES CAP_CULTURA_PROD (ID_CAP_CULTURA_PROD);
ALTER TABLE CAP_CULTURA_PROD ADD FOREIGN KEY (FK_NOM_PLANTA_CULTURA) REFERENCES NOM_PLANTA_CULTURA (ID_NOM_PLANTA_CULTURA);
ALTER TABLE CAP_CULTURA_PROD ADD FOREIGN KEY (FK_NOM_UNITATE_MASURA) REFERENCES NOM_UNITATE_MASURA (ID_NOM_UNITATE_MASURA);

DROP TABLE IF EXISTS NOM_POM_ARBUST;
CREATE TABLE NOM_POM_ARBUST
(
  id_nom_pom_arbust  NUMBER        NOT NULL,
  fk_nom_pom_arbust  NUMBER,
  cod                VARCHAR2(10)  NOT NULL,
  denumire           VARCHAR2(100) NOT NULL,
  descriere          VARCHAR2(500),
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_POM_ARBUST),
  UNIQUE UK_NOM_POM_ARBUST_COD (COD)
);

CREATE INDEX IDX_NOM_POM_ARB_FK_NOM_POM_ARB ON NOM_POM_ARBUST (FK_NOM_POM_ARBUST);

ALTER TABLE NOM_POM_ARBUST ADD FOREIGN KEY (FK_NOM_POM_ARBUST) REFERENCES NOM_POM_ARBUST (ID_NOM_POM_ARBUST);

DROP TABLE IF EXISTS CAP_FRUCT_PROD;
CREATE TABLE CAP_FRUCT_PROD
(
  id_cap_fruct_prod        NUMBER        NOT NULL,
  fk_cap_fruct_prod        NUMBER,
  fk_nom_capitol           NUMBER        NOT NULL,
  fk_nom_pom_arbust        NUMBER,
  cod                      VARCHAR2(10),
  denumire                 VARCHAR2(100) NOT NULL,
  descriere                VARCHAR2(500),
  cod_rand                 NUMBER(2)     NOT NULL,
  is_formula               NUMBER(1)     NOT NULL,
  tip_formula_relatie      NUMBER(1)     NOT NULL,
  is_nr_pom_razlet         NUMBER(1)     NOT NULL,
  is_prod_medie_pom_razlet NUMBER(1)     NOT NULL,
  is_prod_total_pom_razlet NUMBER(1)     NOT NULL,
  is_suprafata_livada      NUMBER(1)     NOT NULL,
  is_prod_medie_livada     NUMBER(1)     NOT NULL,
  is_prod_total_livada     NUMBER(1)     NOT NULL,
  data_start               DATE          NOT NULL,
  data_stop                DATE,
  base_id                  NUMBER        NOT NULL,
  last_modified_date       TIMESTAMP,
  PRIMARY KEY (ID_CAP_FRUCT_PROD),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1)),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (IS_SUPRAFATA_LIVADA IN (0, 1)),
  CHECK (IS_NR_POM_RAZLET IN (0, 1)),
  CHECK (IS_PROD_MEDIE_LIVADA IN (0, 1)),
  CHECK (IS_PROD_TOTAL_LIVADA IN (0, 1)),
  CHECK (IS_PROD_MEDIE_POM_RAZLET IN (0, 1)),
  CHECK (IS_PROD_TOTAL_POM_RAZLET IN (0, 1))
);
CREATE INDEX IDX_CAP_FRUCT_PROD_COD ON CAP_FRUCT_PROD (COD);
CREATE INDEX IDX_CAP_FRUCT_PROD_COD_RAND ON CAP_FRUCT_PROD (COD_RAND);
CREATE INDEX IDX_CAP_FRUCT_PROD_FK_NOM_CAP ON CAP_FRUCT_PROD (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_FRUCT_PROD_LMD ON CAP_FRUCT_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_FRUCT_PR_FK_CAP_FR_PR ON CAP_FRUCT_PROD (FK_CAP_FRUCT_PROD);
CREATE INDEX IDX_CAP_FR_PR_DATA_START_STOP ON CAP_FRUCT_PROD (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_FR_PR_FK_NOM_POM_ARB ON CAP_FRUCT_PROD (FK_NOM_POM_ARBUST);

ALTER TABLE CAP_FRUCT_PROD ADD FOREIGN KEY (FK_CAP_FRUCT_PROD) REFERENCES CAP_FRUCT_PROD (ID_CAP_FRUCT_PROD);
ALTER TABLE CAP_FRUCT_PROD ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_FRUCT_PROD ADD FOREIGN KEY (FK_NOM_POM_ARBUST) REFERENCES NOM_POM_ARBUST (ID_NOM_POM_ARBUST);


DROP TABLE IF EXISTS CAP_MOD_UTILIZARE;
CREATE TABLE CAP_MOD_UTILIZARE
(
  id_cap_mod_utilizare NUMBER        NOT NULL,
  fk_cap_mod_utilizare NUMBER,
  fk_nom_capitol       NUMBER        NOT NULL,
  cod                  VARCHAR2(10),
  denumire             VARCHAR2(150) NOT NULL,
  descriere            VARCHAR2(500),
  cod_rand             NUMBER(2)     NOT NULL,
  is_formula           NUMBER(1)     NOT NULL,
  tip_formula_relatie  NUMBER(1)     NOT NULL,
  data_start           DATE          NOT NULL,
  data_stop            DATE,
  base_id              NUMBER,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_CAP_MOD_UTILIZARE),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);
CREATE INDEX IDX_CAP_MOD_UTILIZARE_COD ON CAP_MOD_UTILIZARE (COD);
CREATE INDEX IDX_CAP_MOD_UTILIZARE_COD_RAND ON CAP_MOD_UTILIZARE (COD_RAND);
CREATE INDEX IDX_CAP_MOD_UTILIZARE_LMD ON CAP_MOD_UTILIZARE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_MOD_UTIL_DATA_STRT_STP ON CAP_MOD_UTILIZARE (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_MOD_UTIL_FK_CAP_MOD_UT ON CAP_MOD_UTILIZARE (FK_CAP_MOD_UTILIZARE);
CREATE INDEX IDX_CAP_MOD_UTIL_FK_NOM_CAP ON CAP_MOD_UTILIZARE (FK_NOM_CAPITOL);

ALTER TABLE CAP_MOD_UTILIZARE ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_MOD_UTILIZARE ADD FOREIGN KEY (FK_CAP_MOD_UTILIZARE) REFERENCES CAP_MOD_UTILIZARE (ID_CAP_MOD_UTILIZARE);

DROP TABLE IF EXISTS CAP_PLANTATIE;
CREATE TABLE CAP_PLANTATIE
(
  id_cap_plantatie    NUMBER        NOT NULL,
  fk_cap_plantatie    NUMBER,
  fk_nom_capitol      NUMBER        NOT NULL,
  fk_nom_pom_arbust   NUMBER,
  cod                 VARCHAR2(10),
  denumire            VARCHAR2(150) NOT NULL,
  descriere           VARCHAR2(500),
  cod_rand            NUMBER(2)     NOT NULL,
  is_formula          NUMBER(1)     NOT NULL,
  tip_formula_relatie NUMBER(1)     NOT NULL,
  data_start          DATE          NOT NULL,
  data_stop           DATE,
  base_id             NUMBER        NOT NULL,
  last_modified_date  TIMESTAMP,
  PRIMARY KEY (ID_CAP_PLANTATIE),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);

CREATE INDEX IDX_CAP_PLANTATIE_COD ON CAP_PLANTATIE (COD);
CREATE INDEX IDX_CAP_PLANTATIE_COD_RAND ON CAP_PLANTATIE (COD_RAND);
CREATE INDEX IDX_CAP_PLANTATIE_FK_CAP_PLANT ON CAP_PLANTATIE (FK_CAP_PLANTATIE);
CREATE INDEX IDX_CAP_PLANTATIE_FK_NOM_CAP ON CAP_PLANTATIE (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_PLANTATIE_LMD ON CAP_PLANTATIE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_PLANT_DATA_START_STOP ON CAP_PLANTATIE (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_PLANT_FK_NOM_POM_ARB ON CAP_PLANTATIE (FK_NOM_POM_ARBUST);

ALTER TABLE CAP_PLANTATIE ADD FOREIGN KEY (FK_CAP_PLANTATIE) REFERENCES CAP_PLANTATIE (ID_CAP_PLANTATIE);
ALTER TABLE CAP_PLANTATIE ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_PLANTATIE ADD FOREIGN KEY (FK_NOM_POM_ARBUST) REFERENCES NOM_POM_ARBUST (ID_NOM_POM_ARBUST);

DROP TABLE IF EXISTS CAP_PLANTATIE_PROD;
CREATE TABLE CAP_PLANTATIE_PROD
(
  id_cap_plantatie_prod NUMBER        NOT NULL,
  fk_cap_plantatie_prod NUMBER,
  fk_nom_capitol        NUMBER        NOT NULL,
  fk_nom_pom_arbust     NUMBER,
  cod                   VARCHAR2(10),
  denumire              VARCHAR2(150) NOT NULL,
  descriere             VARCHAR2(500),
  cod_rand              NUMBER(2)     NOT NULL,
  is_formula            NUMBER(1)     NOT NULL,
  tip_formula_relatie   NUMBER(1)     NOT NULL,
  is_suprafata          NUMBER(1)     NOT NULL,
  is_prod_medie         NUMBER(1)     NOT NULL,
  is_prod_total         NUMBER(1)     NOT NULL,
  data_start            DATE          NOT NULL,
  data_stop             DATE,
  base_id               NUMBER        NOT NULL,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_CAP_PLANTATIE_PROD),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (IS_PROD_MEDIE IN (0, 1)),
  CHECK (IS_PROD_TOTAL IN (0, 1)),
  CHECK (IS_SUPRAFATA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);

CREATE INDEX IDX_CAP_PLANTATIE_PROD_LMD ON CAP_PLANTATIE_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_PLANT_PROD_BASE_ID ON CAP_PLANTATIE_PROD (BASE_ID);
CREATE INDEX IDX_CAP_PLANT_PROD_COD_RAND ON CAP_PLANTATIE_PROD (COD_RAND);
CREATE INDEX IDX_CAP_PLANT_PR_FK_CAP_PL_PR ON CAP_PLANTATIE_PROD (FK_CAP_PLANTATIE_PROD);
CREATE INDEX IDX_CAP_PLANT_PR_FK_NOM_CAP ON CAP_PLANTATIE_PROD (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_PL_PR_DATA_START_STOP ON CAP_PLANTATIE_PROD (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_PL_PR_FK_NOM_POM_ARB ON CAP_PLANTATIE_PROD (FK_NOM_POM_ARBUST);

ALTER TABLE CAP_PLANTATIE_PROD ADD FOREIGN KEY (FK_CAP_PLANTATIE_PROD) REFERENCES CAP_PLANTATIE_PROD (ID_CAP_PLANTATIE_PROD);
ALTER TABLE CAP_PLANTATIE_PROD ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_PLANTATIE_PROD ADD FOREIGN KEY (FK_NOM_POM_ARBUST) REFERENCES NOM_POM_ARBUST (ID_NOM_POM_ARBUST);


DROP TABLE IF EXISTS CAP_POM_RAZLET;
CREATE TABLE CAP_POM_RAZLET
(
  id_cap_pom_razlet   NUMBER        NOT NULL,
  fk_cap_pom_razlet   NUMBER,
  fk_nom_capitol      NUMBER        NOT NULL,
  fk_nom_pom_arbust   NUMBER,
  cod                 VARCHAR2(10),
  denumire            VARCHAR2(100) NOT NULL,
  descriere           VARCHAR2(500),
  cod_rand            NUMBER(2)     NOT NULL,
  is_formula          NUMBER(1)     NOT NULL,
  tip_formula_relatie NUMBER(1)     NOT NULL,
  data_start          DATE          NOT NULL,
  data_stop           DATE,
  base_id             NUMBER        NOT NULL,
  last_modified_date  TIMESTAMP,
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);

CREATE INDEX IDX_CAP_POM_RAZLET_COD ON CAP_POM_RAZLET (COD);
CREATE INDEX IDX_CAP_POM_RAZLET_COD_RAND ON CAP_POM_RAZLET (COD_RAND);
CREATE INDEX IDX_CAP_POM_RAZLET_FK_NOM_CAP ON CAP_POM_RAZLET (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_POM_RAZLET_LMD ON CAP_POM_RAZLET (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_POM_RAZ_DAT_START_STOP ON CAP_POM_RAZLET (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_POM_RAZ_FK_CAP_POM_RAZ ON CAP_POM_RAZLET (FK_CAP_POM_RAZLET);
CREATE INDEX IDX_CAP_POM_RAZ_FK_NOM_POM_ARB ON CAP_POM_RAZLET (FK_NOM_POM_ARBUST);

ALTER TABLE CAP_POM_RAZLET ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_POM_RAZLET ADD FOREIGN KEY (FK_CAP_POM_RAZLET) REFERENCES CAP_POM_RAZLET (ID_CAP_POM_RAZLET);
ALTER TABLE CAP_POM_RAZLET ADD FOREIGN KEY (FK_NOM_POM_ARBUST) REFERENCES NOM_POM_ARBUST (ID_NOM_POM_ARBUST);

DROP TABLE IF EXISTS CAP_SISTEM_TEHNIC;
CREATE TABLE CAP_SISTEM_TEHNIC
(
  id_cap_sistem_tehnic NUMBER        NOT NULL,
  fk_nom_capitol       NUMBER        NOT NULL,
  cod                  VARCHAR2(10),
  denumire             VARCHAR2(100) NOT NULL,
  descriere            VARCHAR2(500),
  cod_rand             NUMBER(2)     NOT NULL,
  data_start           DATE          NOT NULL,
  data_stop            DATE,
  base_id              NUMBER,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_CAP_SISTEM_TEHNIC)
);

CREATE INDEX IDX_CAP_SISTEM_TEHNIC_COD ON CAP_SISTEM_TEHNIC (COD);
CREATE INDEX IDX_CAP_SISTEM_TEHNIC_COD_RAND ON CAP_SISTEM_TEHNIC (COD_RAND);
CREATE INDEX IDX_CAP_SISTEM_TEHNIC_LMD ON CAP_SISTEM_TEHNIC (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_SISTEM_TEH_FK_NOM_CAP ON CAP_SISTEM_TEHNIC (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_SIS_TEH_DAT_START_STOP ON CAP_SISTEM_TEHNIC (DATA_START, DATA_STOP);

ALTER TABLE CAP_SISTEM_TEHNIC ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);

DROP TABLE IF EXISTS CAP_SUBSTANTA_CHIMICA;
CREATE TABLE CAP_SUBSTANTA_CHIMICA
(
  id_cap_substanta_chimica NUMBER        NOT NULL,
  fk_cap_substanta_chimica NUMBER,
  fk_nom_capitol           NUMBER        NOT NULL,
  cod                      VARCHAR2(10),
  denumire                 VARCHAR2(100) NOT NULL,
  descriere                VARCHAR2(500),
  cod_rand                 NUMBER(2)     NOT NULL,
  is_formula               NUMBER(1)     NOT NULL,
  tip_formula_relatie      NUMBER(1)     NOT NULL,
  data_start               DATE          NOT NULL,
  data_stop                DATE,
  base_id                  NUMBER        NOT NULL,
  last_modified_date       TIMESTAMP,
  PRIMARY KEY (ID_CAP_SUBSTANTA_CHIMICA),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);

CREATE INDEX IDX_CAP_SUBSTANTA_CHIMICA_LMD ON CAP_SUBSTANTA_CHIMICA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_SUBST_CHIMICA_BASE_ID ON CAP_SUBSTANTA_CHIMICA (BASE_ID);
CREATE INDEX IDX_CAP_SUBST_CHIMICA_COD_RAND ON CAP_SUBSTANTA_CHIMICA (COD_RAND);
CREATE INDEX IDX_CAP_SUBST_CHIM_FK_NOM_CAP ON CAP_SUBSTANTA_CHIMICA (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_SUB_CHI_DAT_START_STOP ON CAP_SUBSTANTA_CHIMICA (DATA_START, DATA_STOP);
CREATE INDEX IDX_CAP_SUB_CHI_FK_CAP_SUB_CHI ON CAP_SUBSTANTA_CHIMICA (FK_CAP_SUBSTANTA_CHIMICA);

ALTER TABLE CAP_SUBSTANTA_CHIMICA ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_SUBSTANTA_CHIMICA ADD FOREIGN KEY (FK_CAP_SUBSTANTA_CHIMICA) REFERENCES CAP_SUBSTANTA_CHIMICA (ID_CAP_SUBSTANTA_CHIMICA);

DROP TABLE IF EXISTS CAP_TEREN_IRIGAT;
CREATE TABLE CAP_TEREN_IRIGAT
(
  id_cap_teren_irigat NUMBER        NOT NULL,
  fk_cap_teren_irigat NUMBER,
  fk_nom_capitol      NUMBER        NOT NULL,
  cod                 VARCHAR2(10),
  denumire            VARCHAR2(100) NOT NULL,
  descriere           VARCHAR2(500),
  cod_rand            NUMBER(2)     NOT NULL,
  is_formula          NUMBER(1)     NOT NULL,
  tip_formula_relatie NUMBER(1)     NOT NULL,
  data_start          DATE          NOT NULL,
  data_stop           DATE,
  base_id             NUMBER        NOT NULL,
  last_modified_date  TIMESTAMP,
  PRIMARY KEY (ID_CAP_TEREN_IRIGAT),
  CHECK (IS_FORMULA IN (0, 1)),
  CHECK (TIP_FORMULA_RELATIE IN (-1, 0, 1))
);

CREATE INDEX IDX_CAP_TEREN_IRIGAT_COD ON CAP_TEREN_IRIGAT (COD);
CREATE INDEX IDX_CAP_TEREN_IRIGAT_COD_RAND ON CAP_TEREN_IRIGAT (COD_RAND);
CREATE INDEX IDX_CAP_TEREN_IRIGAT_LMD ON CAP_TEREN_IRIGAT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CAP_TEREN_IRIG_FK_NOM_CAP ON CAP_TEREN_IRIGAT (FK_NOM_CAPITOL);
CREATE INDEX IDX_CAP_TER_IRG_FK_CAP_TER_IRG ON CAP_TEREN_IRIGAT (FK_CAP_TEREN_IRIGAT);
CREATE INDEX IDX_CAP_TER_IRIG_DATA_STRT_STP ON CAP_TEREN_IRIGAT (DATA_START, DATA_STOP);

ALTER TABLE CAP_TEREN_IRIGAT ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE CAP_TEREN_IRIGAT ADD FOREIGN KEY (FK_CAP_TEREN_IRIGAT) REFERENCES CAP_TEREN_IRIGAT (ID_CAP_TEREN_IRIGAT);

DROP TABLE IF EXISTS CATEGORIE_ANIMAL;
CREATE TABLE CATEGORIE_ANIMAL
(
  id_categorie_animal     NUMBER     NOT NULL,
  fk_gospodarie           NUMBER     NOT NULL,
  fk_cap_categorie_animal NUMBER     NOT NULL,
  fk_nom_judet            NUMBER,
  an                      NUMBER(4)  NOT NULL,
  semestru                NUMBER(1)  NOT NULL,
  nr_cap                  NUMBER(10) NOT NULL,
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_CATEGORIE_ANIMAL)
);
CREATE INDEX IDX_CATEGORIE_ANIMAL_LMD ON CATEGORIE_ANIMAL (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CATEG_ANIMAL_FK_GOSPODARIE ON CATEGORIE_ANIMAL (FK_GOSPODARIE);
CREATE INDEX IDX_CAT_ANIMAL_FK_CAP_CAT_ANIM ON CATEGORIE_ANIMAL (FK_CAP_CATEGORIE_ANIMAL);

ALTER TABLE CATEGORIE_ANIMAL ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE CATEGORIE_ANIMAL ADD FOREIGN KEY (FK_CAP_CATEGORIE_ANIMAL) REFERENCES CAP_CATEGORIE_ANIMAL (ID_CAP_CATEGORIE_ANIMAL);

DROP TABLE IF EXISTS CERERE;
CREATE TABLE CERERE
(
  id_cerere     NUMBER        NOT NULL,
  fk_gospodarie NUMBER        NOT NULL,
  fk_nom_judet  NUMBER,
  data_cerere   DATE          NOT NULL,
  titlu         VARCHAR2(100) NOT NULL,
  uid_cmis      VARCHAR2(20),
  PRIMARY KEY (ID_CERERE)
);
CREATE INDEX IDX_CERERE_FK_GOSPODARIE ON CERERE (FK_GOSPODARIE);
CREATE INDEX IDX_CERERE_UID_CMIS ON CERERE (UID_CMIS);

ALTER TABLE CERERE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS CERERE_DETALIU;
CREATE TABLE CERERE_DETALIU
(
  id_cerere_detaliu NUMBER NOT NULL,
  fk_cerere         NUMBER NOT NULL,
  fk_nom_capitol    NUMBER,
  fk_nom_judet      NUMBER,
  rand_capitol      VARCHAR2(250),
  coloana_capitol   VARCHAR2(100),
  continut          CLOB,
  PRIMARY KEY (ID_CERERE_DETALIU)
);
CREATE INDEX IDX_CERERE_FK_CERERE ON CERERE_DETALIU (FK_CERERE);
CREATE INDEX IDX_CERERE_FK_NOM_CAPITOL ON CERERE_DETALIU (FK_NOM_CAPITOL);

ALTER TABLE CERERE_DETALIU ADD FOREIGN KEY (FK_CERERE) REFERENCES CERERE (ID_CERERE);
ALTER TABLE CERERE_DETALIU ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);

DROP TABLE IF EXISTS CERTIFICAT_COM;
CREATE TABLE CERTIFICAT_COM
(
  id_certificat_com  NUMBER       NOT NULL,
  fk_atestat         NUMBER       NOT NULL,
  serie              VARCHAR2(10) NOT NULL,
  data_eliberare     DATE         NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_CERTIFICAT_COM)
);
CREATE INDEX IDX_CERTIFICAT_COM_FK_ATESTAT ON CERTIFICAT_COM (FK_ATESTAT);
CREATE INDEX IDX_CERTIFICAT_COM_LMD ON CERTIFICAT_COM (LAST_MODIFIED_DATE);

ALTER TABLE CERTIFICAT_COM ADD FOREIGN KEY (FK_ATESTAT) REFERENCES ATESTAT (ID_ATESTAT);

DROP TABLE IF EXISTS NOM_DESTINATIE_CLADIRE;
CREATE TABLE NOM_DESTINATIE_CLADIRE
(
  id_nom_destinatie_cladire NUMBER        NOT NULL,
  cod                       VARCHAR2(10)  NOT NULL,
  denumire                  VARCHAR2(100) NOT NULL,
  descriere                 VARCHAR2(500),
  data_start                DATE          NOT NULL,
  data_stop                 DATE,
  base_id                   NUMBER        NOT NULL,
  last_modified_date        TIMESTAMP,
  PRIMARY KEY (ID_NOM_DESTINATIE_CLADIRE)
);

CREATE INDEX IDX_NOM_DESTINATIE_CLADIRE_COD ON NOM_DESTINATIE_CLADIRE (COD);
CREATE INDEX IDX_NOM_DESTINATIE_CLADIRE_LMD ON NOM_DESTINATIE_CLADIRE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_DEST_CLADIRE_BASE_ID ON NOM_DESTINATIE_CLADIRE (BASE_ID);
CREATE INDEX IDX_NOM_DST_CLD_DAT_START_STOP ON NOM_DESTINATIE_CLADIRE (DATA_START, DATA_STOP);


DROP TABLE IF EXISTS NOM_TIP_CLADIRE;

CREATE TABLE NOM_TIP_CLADIRE
(
  id_nom_tip_cladire NUMBER        NOT NULL,
  cod                VARCHAR2(10)  NOT NULL,
  denumire           VARCHAR2(300) NOT NULL,
  descriere          VARCHAR2(500),
  data_start         DATE          NOT NULL,
  data_stop          DATE,
  base_id            NUMBER        NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_NOM_TIP_CLADIRE)
);

CREATE INDEX IDX_NOM_TIP_CLADIRE_BASE_ID ON NOM_TIP_CLADIRE (BASE_ID);
CREATE INDEX IDX_NOM_TIP_CLADIRE_COD ON NOM_TIP_CLADIRE (COD);
CREATE INDEX IDX_NOM_TIP_CLADIRE_LMD ON NOM_TIP_CLADIRE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_TIP_CLD_DAT_START_STOP ON NOM_TIP_CLADIRE (DATA_START, DATA_STOP);


DROP TABLE IF EXISTS CLADIRE;
CREATE TABLE CLADIRE
(
  id_cladire                NUMBER       NOT NULL,
  fk_gospodarie             NUMBER       NOT NULL,
  fk_nom_tip_cladire        NUMBER       NOT NULL,
  fk_nom_destinatie_cladire NUMBER       NOT NULL,
  fk_adresa                 NUMBER       NOT NULL,
  fk_nom_judet              NUMBER,
  identificator             VARCHAR2(20) NOT NULL,
  an                        NUMBER(4)    NOT NULL,
  zona                      VARCHAR2(50) NOT NULL,
  suprafata_desfasurata     NUMBER(5)    NOT NULL,
  suprafata_sol             NUMBER(5),
  an_terminare              NUMBER(4)    NOT NULL,
  identificator_cadastral   VARCHAR2(20),
  last_modified_date        TIMESTAMP,
  PRIMARY KEY (ID_CLADIRE)
);

CREATE INDEX IDX_CLADIRE_FK_ADRESA ON CLADIRE (FK_ADRESA);
CREATE INDEX IDX_CLADIRE_FK_GOSPODARIE ON CLADIRE (FK_GOSPODARIE);
CREATE INDEX IDX_CLADIRE_FK_NOM_DEST_CLAD ON CLADIRE (FK_NOM_DESTINATIE_CLADIRE);
CREATE INDEX IDX_CLADIRE_FK_NOM_TIP_CLADIRE ON CLADIRE (FK_NOM_TIP_CLADIRE);
CREATE INDEX IDX_CLADIRE_IDENTIFICATOR ON CLADIRE (IDENTIFICATOR);
CREATE INDEX IDX_CLADIRE_IDENT_CADASTRAL ON CLADIRE (IDENTIFICATOR_CADASTRAL);
CREATE INDEX IDX_CLADIRE_LMD ON CLADIRE (LAST_MODIFIED_DATE);

ALTER TABLE CLADIRE ADD FOREIGN KEY (FK_ADRESA) REFERENCES ADRESA (ID_ADRESA);
ALTER TABLE CLADIRE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE CLADIRE ADD FOREIGN KEY (FK_NOM_DESTINATIE_CLADIRE) REFERENCES NOM_DESTINATIE_CLADIRE (ID_NOM_DESTINATIE_CLADIRE);
ALTER TABLE CLADIRE ADD FOREIGN KEY (FK_NOM_TIP_CLADIRE) REFERENCES NOM_TIP_CLADIRE (ID_NOM_TIP_CLADIRE);

DROP TABLE IF EXISTS NOM_TIP_CONTRACT;

CREATE TABLE NOM_TIP_CONTRACT
(
  id_nom_tip_contract NUMBER        NOT NULL,
  cod                 VARCHAR2(10)  NOT NULL,
  denumire            VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_CONTRACT),
  UNIQUE UK_TIP_CONTRACT_COD (COD)
);

DROP TABLE IF EXISTS PERSOANA_FIZICA;

CREATE TABLE PERSOANA_FIZICA
(
  id_persoana_fizica NUMBER       NOT NULL,
  cnp                VARCHAR2(13),
  nume               VARCHAR2(60) NOT NULL,
  initiala_tata      VARCHAR2(10) NOT NULL,
  prenume            VARCHAR2(60) NOT NULL,
  nif                VARCHAR2(13),
  data_start         DATE         NOT NULL,
  data_stop          DATE,
  base_id            NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_PERSOANA_FIZICA),
  CHECK (CNP IS NOT NULL OR NIF IS NOT NULL)
);

CREATE INDEX IDX_PERSOANA_FIZICA_BASE_ID ON PERSOANA_FIZICA (BASE_ID);
CREATE INDEX IDX_PERSOANA_FIZICA_CNP ON PERSOANA_FIZICA (CNP);
CREATE INDEX IDX_PERSOANA_FIZICA_LMD ON PERSOANA_FIZICA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PERSOANA_FIZICA_NIF ON PERSOANA_FIZICA (NIF);
CREATE INDEX IDX_PERS_FIZICA_DAT_START_STOP ON PERSOANA_FIZICA (DATA_START, DATA_STOP);

DROP TABLE IF EXISTS NOM_FORMA_ORGANIZARE_RC;

CREATE TABLE NOM_FORMA_ORGANIZARE_RC
(
  id_nom_forma_organizare_rc NUMBER        NOT NULL,
  cod                        VARCHAR2(10)  NOT NULL,
  denumire                   VARCHAR2(100) NOT NULL,
  is_personalitate_juridica  NUMBER(1)     NOT NULL,
  PRIMARY KEY (ID_NOM_FORMA_ORGANIZARE_RC),
  UNIQUE UK_NOM_FORMA_ORGANIZARE_RC_COD (COD),
  CHECK (IS_PERSONALITATE_JURIDICA IN (0, 1))
);

CREATE INDEX IDX_NOM_FRM_ORG_RC_IS_PERS_JUR ON NOM_FORMA_ORGANIZARE_RC (IS_PERSONALITATE_JURIDICA);

DROP TABLE IF EXISTS PERSOANA_RC;
CREATE TABLE PERSOANA_RC
(
  id_persoana_rc             NUMBER        NOT NULL,
  fk_nom_forma_organizare_rc NUMBER        NOT NULL,
  denumire                   VARCHAR2(150) NOT NULL,
  cui                        VARCHAR2(20)  NOT NULL,
  cif                        VARCHAR2(20),
  data_start                 DATE          NOT NULL,
  data_stop                  DATE,
  base_id                    NUMBER,
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_PERSOANA_RC)
);

CREATE INDEX IDX_PERSOANA_RC_BASE_ID ON PERSOANA_RC (BASE_ID);
CREATE INDEX IDX_PERSOANA_RC_CIF ON PERSOANA_RC (CIF);
CREATE INDEX IDX_PERSOANA_RC_CUI ON PERSOANA_RC (CUI);
CREATE INDEX IDX_PERSOANA_RC_LMD ON PERSOANA_RC (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PERS_RC_DATA_START_STOP ON PERSOANA_RC (DATA_START, DATA_STOP);
CREATE INDEX IDX_PERS_RC_FK_NOM_FORM_ORG_RC ON PERSOANA_RC (FK_NOM_FORMA_ORGANIZARE_RC);

ALTER TABLE PERSOANA_RC ADD FOREIGN KEY (FK_NOM_FORMA_ORGANIZARE_RC) REFERENCES NOM_FORMA_ORGANIZARE_RC (ID_NOM_FORMA_ORGANIZARE_RC);

DROP TABLE IF EXISTS CONTRACT;
CREATE TABLE CONTRACT
(
  id_contract                NUMBER        NOT NULL,
  fk_gospodarie              NUMBER        NOT NULL,
  fk_nom_tip_contract        NUMBER        NOT NULL,
  fk_nom_categorie_folosinta NUMBER,
  fk_persoana_fizica         NUMBER,
  fk_persoana_rc             NUMBER,
  fk_nom_judet               NUMBER,
  nr_crt                     NUMBER(5)     NOT NULL,
  nr_contract                VARCHAR2(20)  NOT NULL,
  data_contract              DATE          NOT NULL,
  suprafata                  NUMBER(15)    NOT NULL,
  data_start                 DATE          NOT NULL,
  data_stop                  DATE          NOT NULL,
  redeventa                  NUMBER(15, 2) NOT NULL,
  redeventa_completa         VARCHAR2(100),
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_CONTRACT)
);

CREATE INDEX IDX_CONTRACT_DATA_START_STOP ON CONTRACT (DATA_START, DATA_STOP);
CREATE INDEX IDX_CONTRACT_FK_GOSPODARIE ON CONTRACT (FK_GOSPODARIE);
CREATE INDEX IDX_CONTRACT_FK_NOM_CAT_FOL ON CONTRACT (FK_NOM_CATEGORIE_FOLOSINTA);
CREATE INDEX IDX_CONTRACT_FK_NOM_TIP_CONTR ON CONTRACT (FK_NOM_TIP_CONTRACT);
CREATE INDEX IDX_CONTRACT_FK_PERSOANA_RC ON CONTRACT (FK_PERSOANA_RC);
CREATE INDEX IDX_CONTRACT_FK_PERS_FIZICA ON CONTRACT (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_CONTRACT_LMD ON CONTRACT (LAST_MODIFIED_DATE);

ALTER TABLE CONTRACT ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE CONTRACT ADD FOREIGN KEY (FK_NOM_CATEGORIE_FOLOSINTA) REFERENCES NOM_CATEGORIE_FOLOSINTA (ID_NOM_CATEGORIE_FOLOSINTA);
ALTER TABLE CONTRACT ADD FOREIGN KEY (FK_NOM_TIP_CONTRACT) REFERENCES NOM_TIP_CONTRACT (ID_NOM_TIP_CONTRACT);
ALTER TABLE CONTRACT ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);
ALTER TABLE CONTRACT ADD FOREIGN KEY (FK_PERSOANA_RC) REFERENCES PERSOANA_RC (ID_PERSOANA_RC);

DROP TABLE IF EXISTS CROTALIE;
CREATE TABLE CROTALIE
(
  id_crotalie         NUMBER       NOT NULL,
  fk_categorie_animal NUMBER       NOT NULL,
  cod_identificare    VARCHAR2(20) NOT NULL,
  last_modified_date  TIMESTAMP,
  PRIMARY KEY (ID_CROTALIE)
);

CREATE INDEX IDX_CROTALIE_COD_IDENTIFICARE ON CROTALIE (COD_IDENTIFICARE);
CREATE INDEX IDX_CROTALIE_FK_CATEG_ANIMAL ON CROTALIE (FK_CATEGORIE_ANIMAL);
CREATE INDEX IDX_CROTALIE_LMD ON CROTALIE (LAST_MODIFIED_DATE);

ALTER TABLE CROTALIE ADD FOREIGN KEY (FK_CATEGORIE_ANIMAL) REFERENCES CATEGORIE_ANIMAL (ID_CATEGORIE_ANIMAL);

DROP TABLE IF EXISTS NOM_TIP_SPATIU_PROT;
CREATE TABLE NOM_TIP_SPATIU_PROT
(
  id_nom_tip_spatiu_prot NUMBER        NOT NULL,
  cod                    VARCHAR2(10)  NOT NULL,
  denumire               VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_SPATIU_PROT),
  UNIQUE UK_NOM_TIP_SPATIU_PROT_COD (COD)
);

DROP TABLE IF EXISTS CULTURA;
CREATE TABLE CULTURA
(
  id_cultura             NUMBER     NOT NULL,
  fk_gospodarie          NUMBER     NOT NULL,
  fk_cap_cultura         NUMBER     NOT NULL,
  fk_nom_tip_spatiu_prot NUMBER,
  fk_nom_judet           NUMBER,
  an                     NUMBER(4)  NOT NULL,
  suprafata              NUMBER(15) NOT NULL,
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_CULTURA)
);

CREATE INDEX IDX_CULTURA_AN ON CULTURA (AN);
CREATE INDEX IDX_CULTURA_FK_CAP_CULTURA ON CULTURA (FK_CAP_CULTURA);
CREATE INDEX IDX_CULTURA_FK_GOSPODARIE ON CULTURA (FK_GOSPODARIE);
CREATE INDEX IDX_CULTURA_FK_NOM_TIP_SP_PROT ON CULTURA (FK_NOM_TIP_SPATIU_PROT);
CREATE INDEX IDX_CULTURA_LMD ON CULTURA (LAST_MODIFIED_DATE);

ALTER TABLE CULTURA ADD FOREIGN KEY (FK_CAP_CULTURA) REFERENCES CAP_CULTURA (ID_CAP_CULTURA);
ALTER TABLE CULTURA ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE CULTURA ADD FOREIGN KEY (FK_NOM_TIP_SPATIU_PROT) REFERENCES NOM_TIP_SPATIU_PROT (ID_NOM_TIP_SPATIU_PROT);

DROP TABLE IF EXISTS CULTURA_PROD;
CREATE TABLE CULTURA_PROD
(
  id_cultura_prod        NUMBER    NOT NULL,
  fk_nom_uat             NUMBER    NOT NULL,
  fk_cap_cultura_prod    NUMBER    NOT NULL,
  fk_nom_tip_spatiu_prot NUMBER,
  fk_nom_judet           NUMBER,
  an                     NUMBER(4) NOT NULL,
  suprafata              NUMBER(15),
  prod_medie             NUMBER(10),
  prod_total             NUMBER(15),
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_CULTURA_PROD)
);
CREATE INDEX IDX_CULTURA_PROD_AN ON CULTURA_PROD (AN);
CREATE INDEX IDX_CULTURA_PROD_FK_NOM_UAT ON CULTURA_PROD (FK_NOM_UAT);
CREATE INDEX IDX_CULTURA_PROD_LMD ON CULTURA_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_CULT_PROD_FK_CAP_CULT_PROD ON CULTURA_PROD (FK_CAP_CULTURA_PROD);
CREATE INDEX IDX_CULT_PROD_FK_NOM_TIP_SP_PR ON CULTURA_PROD (FK_NOM_TIP_SPATIU_PROT);

ALTER TABLE CULTURA_PROD ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);
ALTER TABLE CULTURA_PROD ADD FOREIGN KEY (FK_CAP_CULTURA_PROD) REFERENCES CAP_CULTURA_PROD (ID_CAP_CULTURA_PROD);
ALTER TABLE CULTURA_PROD ADD FOREIGN KEY (FK_NOM_TIP_SPATIU_PROT) REFERENCES NOM_TIP_SPATIU_PROT (ID_NOM_TIP_SPATIU_PROT);

DROP TABLE IF EXISTS DETINATOR_PF;


CREATE TABLE DETINATOR_PF
(
  id_detinator_pf    NUMBER    NOT NULL,
  fk_gospodarie      NUMBER    NOT NULL,
  fk_persoana_fizica NUMBER    NOT NULL,
  fk_persoana_rc     NUMBER,
  fk_nom_judet       NUMBER,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_DETINATOR_PF)
);

CREATE INDEX IDX_DETINATOR_PF_FK_GOSPODARIE ON DETINATOR_PF (FK_GOSPODARIE);
CREATE INDEX IDX_DETINATOR_PF_FK_PERS_FIZ ON DETINATOR_PF (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_DETINATOR_PF_FK_PERS_RC ON DETINATOR_PF (FK_PERSOANA_RC);
CREATE INDEX IDX_DETINATOR_PF_LMD ON DETINATOR_PF (LAST_MODIFIED_DATE);

ALTER TABLE DETINATOR_PF ADD FOREIGN KEY (FK_PERSOANA_RC) REFERENCES PERSOANA_RC (ID_PERSOANA_RC);
ALTER TABLE DETINATOR_PF ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);
ALTER TABLE DETINATOR_PF ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS DETINATOR_PJ;


CREATE TABLE DETINATOR_PJ
(
  id_detinator_pj       NUMBER    NOT NULL,
  fk_gospodarie         NUMBER    NOT NULL,
  fk_persoana_rc        NUMBER    NOT NULL,
  fk_persoana_fizica    NUMBER    NOT NULL,
  fk_nom_judet          NUMBER,
  denumire_subdiviziune VARCHAR2(150),
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_DETINATOR_PJ)
);

CREATE INDEX IDX_DETINATOR_PJ_FK_GOSPODARIE ON DETINATOR_PJ (FK_GOSPODARIE);
CREATE INDEX IDX_DETINATOR_PJ_FK_PERS_FIZIC ON DETINATOR_PJ (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_DETINATOR_PJ_FK_PERS_RC ON DETINATOR_PJ (FK_PERSOANA_RC);
CREATE INDEX IDX_DETINATOR_PJ_LMD ON DETINATOR_PJ (LAST_MODIFIED_DATE);


ALTER TABLE DETINATOR_PJ ADD FOREIGN KEY (FK_PERSOANA_RC) REFERENCES PERSOANA_RC (ID_PERSOANA_RC);
ALTER TABLE DETINATOR_PJ ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);
ALTER TABLE DETINATOR_PJ ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS DOC_CERERE;
CREATE TABLE DOC_CERERE
(
  id_doc_cerere NUMBER    NOT NULL,
  fk_cerere     NUMBER    NOT NULL,
  fk_nom_judet  NUMBER,
  data_doc      DATE      NOT NULL,
  continut      BLOB      NOT NULL,
  is_activ      NUMBER(1) NOT NULL,
  uid_cmis      VARCHAR2(20),
  PRIMARY KEY (ID_DOC_CERERE),
  CHECK (IS_ACTIV IN (0, 1))
);
CREATE INDEX IDX_DOC_CERERE_DATA_DOC ON DOC_CERERE (DATA_DOC);
CREATE INDEX IDX_DOC_CERERE_FK_CERERE ON DOC_CERERE (FK_CERERE);
--create bitmap index IDX_DOC_CERERE_IS_ACTIV on DOC_CERERE (IS_ACTIV);
CREATE INDEX IDX_DOC_CERERE_UID_CMIS ON DOC_CERERE (UID_CMIS);

ALTER TABLE DOC_CERERE ADD FOREIGN KEY (FK_CERERE) REFERENCES CERERE (ID_CERERE);

DROP TABLE IF EXISTS NOM_REZOLUTIE_CERERE;
CREATE TABLE NOM_REZOLUTIE_CERERE
(
  id_nom_rezolutie_cerere NUMBER        NOT NULL,
  cod                     VARCHAR2(10)  NOT NULL,
  denumire                VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_REZOLUTIE_CERERE),
  UNIQUE UK_NOM_REZOLUTIE_CERERE_COD (COD)
);


DROP TABLE IF EXISTS NOM_STARE_CERERE;
CREATE TABLE NOM_STARE_CERERE
(
  id_nom_stare_cerere NUMBER        NOT NULL,
  cod                 VARCHAR2(10)  NOT NULL,
  denumire            VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_STARE_CERERE),
  UNIQUE UK_NOM_STARE_CERERE_COD (COD)
);

DROP TABLE IF EXISTS FLUX_CERERE;
CREATE TABLE FLUX_CERERE
(
  id_flux_cerere          NUMBER        NOT NULL,
  fk_cerere               NUMBER        NOT NULL,
  fk_app_utilizator       NUMBER        NOT NULL,
  fk_nom_stare_cerere     NUMBER        NOT NULL,
  fk_nom_rezolutie_cerere NUMBER,
  fk_nom_judet            NUMBER,
  data_stare              DATE          NOT NULL,
  descriere               VARCHAR2(500) NOT NULL,
  PRIMARY KEY (ID_FLUX_CERERE)
);
CREATE INDEX IDX_FLUX_CERERE_DATA_STARE ON FLUX_CERERE (DATA_STARE);
CREATE INDEX IDX_FLUX_CERERE_FK_APP_UTILIZ ON FLUX_CERERE (FK_APP_UTILIZATOR);
CREATE INDEX IDX_FLUX_CERERE_FK_CERERE ON FLUX_CERERE (FK_CERERE);
CREATE INDEX IDX_FLUX_CERERE_FK_NOM_REZ_CER ON FLUX_CERERE (FK_NOM_REZOLUTIE_CERERE);
CREATE INDEX IDX_FLUX_CERERE_FK_NOM_ST_CER ON FLUX_CERERE (FK_NOM_STARE_CERERE);

--alter table FLUX_CERERE add foreign key (FK_APP_UTILIZATOR)  references RAN_PORTAL_DEV.APP_UTILIZATOR (ID_APP_UTILIZATOR);
ALTER TABLE FLUX_CERERE ADD FOREIGN KEY (FK_CERERE) REFERENCES CERERE (ID_CERERE);
ALTER TABLE FLUX_CERERE ADD FOREIGN KEY (FK_NOM_REZOLUTIE_CERERE) REFERENCES NOM_REZOLUTIE_CERERE (ID_NOM_REZOLUTIE_CERERE);
ALTER TABLE FLUX_CERERE ADD FOREIGN KEY (FK_NOM_STARE_CERERE) REFERENCES NOM_STARE_CERERE (ID_NOM_STARE_CERERE);

DROP TABLE IF EXISTS NOM_STARE_REGISTRU;
CREATE TABLE NOM_STARE_REGISTRU
(
  id_nom_stare_registru NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_STARE_REGISTRU),
  UNIQUE UK_NOM_STARE_REGISTRU_COD (COD)
);

DROP TABLE IF EXISTS NOM_INDICATIV_XML;
CREATE TABLE NOM_INDICATIV_XML
(
  id_nom_indicativ_xml NUMBER        NOT NULL,
  cod                  VARCHAR2(10)  NOT NULL,
  denumire             VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_INDICATIV_XML),
  UNIQUE UK_NOM_INDICATIV_XML_COD (COD)
);

DROP TABLE IF EXISTS NOM_SURSA_REGISTRU;
CREATE TABLE NOM_SURSA_REGISTRU
(
  id_nom_sursa_registru NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_SURSA_REGISTRU),
  UNIQUE UK_NOM_SURSA_REGISTRU_COD (COD)
);

DROP TABLE IF EXISTS REGISTRU;
CREATE TABLE REGISTRU
(
  id_registru              NUMBER              NOT NULL,
  fk_nom_uat               NUMBER              NOT NULL,
  fk_nom_stare_registru    NUMBER              NOT NULL,
  fk_nom_sursa_registru    NUMBER              NOT NULL,
  fk_nom_indicativ_xml     NUMBER              NOT NULL,
  fk_nom_capitol           NUMBER              NOT NULL,
  fk_gospodarie            NUMBER,
  fk_nom_judet             NUMBER,
  modalitate_transmitere   NUMBER(1) DEFAULT 3 NOT NULL,
  index_registru           VARCHAR2(36)        NOT NULL,
  data_registru            DATE                NOT NULL,
  data_export              DATE                NOT NULL,
  identificator_gospodarie VARCHAR2(30),
  an                       NUMBER(4),
  continut                 CLOB                NOT NULL,
  recipisa                 BLOB,
  is_recipisa_semnata      NUMBER(1)           NOT NULL,
  stare_corelare           NUMBER(1)           NOT NULL,
  PRIMARY KEY (ID_REGISTRU),
  CHECK (IS_RECIPISA_SEMNATA IN (0, 1)),
  CHECK (MODALITATE_TRANSMITERE IN (1, 2, 3)),
  CHECK (STARE_CORELARE IN (1, 2, 3))
);
CREATE INDEX IDX_REGISTRU_AN ON REGISTRU (AN);
CREATE INDEX IDX_REGISTRU_DATA_REGISTRU ON REGISTRU (DATA_REGISTRU);
CREATE INDEX IDX_REGISTRU_FK_GOSPODARIE ON REGISTRU (FK_GOSPODARIE);
CREATE INDEX IDX_REGISTRU_FK_NOM_CAPITOL ON REGISTRU (FK_NOM_CAPITOL);
CREATE INDEX IDX_REGISTRU_FK_NOM_INDIC_XML ON REGISTRU (FK_NOM_INDICATIV_XML);
CREATE INDEX IDX_REGISTRU_FK_NOM_STARE_REG ON REGISTRU (FK_NOM_STARE_REGISTRU);
CREATE INDEX IDX_REGISTRU_FK_NOM_SURSA_REG ON REGISTRU (FK_NOM_SURSA_REGISTRU);
CREATE INDEX IDX_REGISTRU_FK_NOM_UAT ON REGISTRU (FK_NOM_UAT);
CREATE INDEX IDX_REGISTRU_IDENT_GOSPODARIE ON REGISTRU (IDENTIFICATOR_GOSPODARIE);
CREATE INDEX IDX_REGISTRU_MOD_TRANSMITERE ON REGISTRU (MODALITATE_TRANSMITERE);
CREATE INDEX IDX_REGISTRU_STARE_CORELARE ON REGISTRU (STARE_CORELARE);

ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_CAPITOL) REFERENCES NOM_CAPITOL (ID_NOM_CAPITOL);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_INDICATIV_XML) REFERENCES NOM_INDICATIV_XML (ID_NOM_INDICATIV_XML);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_STARE_REGISTRU) REFERENCES NOM_STARE_REGISTRU (ID_NOM_STARE_REGISTRU);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_SURSA_REGISTRU) REFERENCES NOM_SURSA_REGISTRU (ID_NOM_SURSA_REGISTRU);
ALTER TABLE REGISTRU ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS FLUX_REGISTRU;
CREATE TABLE FLUX_REGISTRU
(
  id_flux_registru      NUMBER NOT NULL,
  fk_registru           NUMBER NOT NULL,
  fk_nom_stare_registru NUMBER NOT NULL,
  data_stare            DATE   NOT NULL,
  mesaj_stare           VARCHAR2(4000),
  PRIMARY KEY (ID_FLUX_REGISTRU)
);

ALTER TABLE FLUX_REGISTRU ADD FOREIGN KEY (FK_REGISTRU) REFERENCES REGISTRU (ID_REGISTRU);
ALTER TABLE FLUX_REGISTRU ADD FOREIGN KEY (FK_NOM_STARE_REGISTRU) REFERENCES NOM_STARE_REGISTRU (ID_NOM_STARE_REGISTRU);

DROP TABLE IF EXISTS FRUCT_PROD;
CREATE TABLE FRUCT_PROD
(
  id_fruct_prod             NUMBER    NOT NULL,
  fk_nom_uat                NUMBER    NOT NULL,
  fk_cap_fruct_prod         NUMBER    NOT NULL,
  fk_nom_judet              NUMBER,
  an                        NUMBER(4) NOT NULL,
  nr_pom_razlet_rod         NUMBER(10),
  prod_medie_pom_razlet_rod NUMBER(5),
  prod_total_pom_razlet_rod NUMBER(10),
  suprafata_livada          NUMBER(15),
  prod_medie_livada         NUMBER(10),
  prod_total_livada         NUMBER(15),
  last_modified_date        TIMESTAMP,
  PRIMARY KEY (ID_FRUCT_PROD)
);

CREATE INDEX IDX_FRUCT_PROD_AN ON FRUCT_PROD (AN);
CREATE INDEX IDX_FRUCT_PROD_FK_CAP_FRUCT_PR ON FRUCT_PROD (FK_CAP_FRUCT_PROD);
CREATE INDEX IDX_FRUCT_PROD_FK_NOM_UAT ON FRUCT_PROD (FK_NOM_UAT);
CREATE INDEX IDX_FRUCT_PROD_LMD ON FRUCT_PROD (LAST_MODIFIED_DATE);

ALTER TABLE FRUCT_PROD ADD FOREIGN KEY (FK_CAP_FRUCT_PROD) REFERENCES CAP_FRUCT_PROD (ID_CAP_FRUCT_PROD);
ALTER TABLE FRUCT_PROD ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS GEOLOCATOR_ADRESA;
CREATE TABLE GEOLOCATOR_ADRESA
(
  id_geolocator_adresa NUMBER NOT NULL,
  fk_adresa            NUMBER NOT NULL,
  fk_nom_judet         NUMBER,
  geometrie            GEOMETRY NOT NULL,
  PRIMARY KEY (ID_GEOLOCATOR_ADRESA)
);
ALTER TABLE GEOLOCATOR_ADRESA ADD FOREIGN KEY (FK_ADRESA) REFERENCES ADRESA (ID_ADRESA);

DROP TABLE IF EXISTS GEOMETRIE_CLADIRE;
CREATE TABLE GEOMETRIE_CLADIRE
(
  id_geometrie_cladire NUMBER NOT NULL,
  fk_cladire           NUMBER NOT NULL,
  fk_nom_judet         NUMBER,
  geometrie            GEOMETRY NOT NULL,
  PRIMARY KEY (ID_GEOMETRIE_CLADIRE)
);
CREATE INDEX IDX_GEOLOCAT_CLADIRE_FK_CLAD ON GEOMETRIE_CLADIRE (FK_CLADIRE);

ALTER TABLE GEOMETRIE_CLADIRE ADD FOREIGN KEY (FK_CLADIRE) REFERENCES CLADIRE (ID_CLADIRE);

DROP TABLE IF EXISTS GEOMETRIE_FLUX_CERERE;
CREATE TABLE GEOMETRIE_FLUX_CERERE
(
  id_geometrie_flux_cerere NUMBER NOT NULL,
  fk_flux_cerere           NUMBER NOT NULL,
  geometrie                GEOMETRY NOT NULL,
  PRIMARY KEY (ID_GEOMETRIE_FLUX_CERERE)
);
CREATE INDEX IDX_GEOMETRIE_FL_CER_FK_FL_CER ON GEOMETRIE_FLUX_CERERE (FK_FLUX_CERERE);
ALTER TABLE GEOMETRIE_FLUX_CERERE ADD FOREIGN KEY (FK_FLUX_CERERE) REFERENCES FLUX_CERERE (ID_FLUX_CERERE);

DROP TABLE IF EXISTS GEOMETRIE_PARCELA_TEREN;
CREATE TABLE GEOMETRIE_PARCELA_TEREN
(
  id_geometrie_parcela_teren NUMBER NOT NULL,
  fk_parcela_teren           NUMBER NOT NULL,
  fk_nom_judet               NUMBER,
  geometrie                  GEOMETRY NOT NULL,
  PRIMARY KEY (ID_GEOMETRIE_PARCELA_TEREN)
);
ALTER TABLE GEOMETRIE_PARCELA_TEREN ADD FOREIGN KEY (FK_PARCELA_TEREN) REFERENCES PARCELA_TEREN (ID_PARCELA_TEREN);

DROP TABLE IF EXISTS INVENTAR_GOSP_UAT;
CREATE TABLE INVENTAR_GOSP_UAT
(
  id_inventar_gosp_uat NUMBER    NOT NULL,
  fk_nom_uat           NUMBER    NOT NULL,
  an                   NUMBER(4) NOT NULL,
  valoare              NUMBER(7) NOT NULL,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_INVENTAR_GOSP_UAT)
);

CREATE INDEX IDX_INVENTAR_GOSP_UAT_AN ON INVENTAR_GOSP_UAT (AN);
CREATE INDEX IDX_INVENTAR_GOSP_UAT_LMD ON INVENTAR_GOSP_UAT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_INVENT_GOSP_UAT_FK_NOM_UAT ON INVENTAR_GOSP_UAT (FK_NOM_UAT);

ALTER TABLE INVENTAR_GOSP_UAT ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);

DROP TABLE IF EXISTS NOM_LEGATURA_RUDENIE;
CREATE TABLE NOM_LEGATURA_RUDENIE
(
  id_nom_legatura_rudenie NUMBER        NOT NULL,
  cod                     VARCHAR2(10)  NOT NULL,
  denumire                VARCHAR2(100) NOT NULL,
  descriere               VARCHAR2(500),
  data_start              DATE          NOT NULL,
  data_stop               DATE,
  base_id                 NUMBER        NOT NULL,
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_NOM_LEGATURA_RUDENIE)
);

CREATE INDEX IDX_NOM_LEGATURA_RUDENIE_COD ON NOM_LEGATURA_RUDENIE (COD);
CREATE INDEX IDX_NOM_LEGATURA_RUDENIE_LMD ON NOM_LEGATURA_RUDENIE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_LEG_RUDENIE_BASE_ID ON NOM_LEGATURA_RUDENIE (BASE_ID);
CREATE INDEX IDX_NOM_LEG_RUD_DAT_START_STOP ON NOM_LEGATURA_RUDENIE (DATA_START, DATA_STOP);

DROP TABLE IF EXISTS MEMBRU_PF;
CREATE TABLE MEMBRU_PF
(
  id_membru_pf            NUMBER    NOT NULL,
  fk_detinator_pf         NUMBER    NOT NULL,
  fk_nom_legatura_rudenie NUMBER    NOT NULL,
  fk_persoana_fizica      NUMBER    NOT NULL,
  fk_nom_judet            NUMBER,
  cod_rand                NUMBER(2) NOT NULL,
  mentiune                VARCHAR2(500),
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_MEMBRU_PF)
);

CREATE INDEX IDX_MEMBRU_PF_FK_DETINATOR_PF ON MEMBRU_PF (FK_DETINATOR_PF);
CREATE INDEX IDX_MEMBRU_PF_FK_NOM_LEG_RUD ON MEMBRU_PF (FK_NOM_LEGATURA_RUDENIE);
CREATE INDEX IDX_MEMBRU_PF_FK_PERS_FIZICA ON MEMBRU_PF (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_MEMBRU_PF_LMD ON MEMBRU_PF (LAST_MODIFIED_DATE);

ALTER TABLE MEMBRU_PF ADD FOREIGN KEY (FK_DETINATOR_PF) REFERENCES DETINATOR_PF (ID_DETINATOR_PF);
ALTER TABLE MEMBRU_PF ADD FOREIGN KEY (FK_NOM_LEGATURA_RUDENIE) REFERENCES NOM_LEGATURA_RUDENIE (ID_NOM_LEGATURA_RUDENIE);
ALTER TABLE MEMBRU_PF ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);

DROP TABLE IF EXISTS MENTIUNE_CERERE_SUC;
CREATE TABLE MENTIUNE_CERERE_SUC
(
  id_mentiune_cerere_suc NUMBER        NOT NULL,
  fk_gospodarie          NUMBER        NOT NULL,
  fk_persoana_fizica     NUMBER        NOT NULL,
  fk_nom_judet           NUMBER,
  data_deces             DATE          NOT NULL,
  nr_inregistrare        VARCHAR2(20)  NOT NULL,
  data_inregistrare      DATE          NOT NULL,
  spn_bin                VARCHAR2(100) NOT NULL,
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_MENTIUNE_CERERE_SUC)
);

CREATE INDEX IDX_MENTIUNE_CERERE_SUC_LMD ON MENTIUNE_CERERE_SUC (LAST_MODIFIED_DATE);
CREATE INDEX IDX_MENT_CERERE_SUC_FK_GOSPOD ON MENTIUNE_CERERE_SUC (FK_GOSPODARIE);
CREATE INDEX IDX_MENT_CER_SUC_FK_PERS_FIZ ON MENTIUNE_CERERE_SUC (FK_PERSOANA_FIZICA);

ALTER TABLE MENTIUNE_CERERE_SUC ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE MENTIUNE_CERERE_SUC ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);

DROP TABLE IF EXISTS MENTIUNE_SPECIALA;
CREATE TABLE MENTIUNE_SPECIALA
(
  id_mentiune_speciala NUMBER        NOT NULL,
  fk_gospodarie        NUMBER        NOT NULL,
  fk_nom_judet         NUMBER,
  mentiune             VARCHAR2(500) NOT NULL,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_MENTIUNE_SPECIALA)
);

CREATE INDEX IDX_MENTIUNE_SPECIALA_FK_GOSP ON MENTIUNE_SPECIALA (FK_GOSPODARIE);
CREATE INDEX IDX_MENTIUNE_SPECIALA_LMD ON MENTIUNE_SPECIALA (LAST_MODIFIED_DATE);

ALTER TABLE MENTIUNE_SPECIALA ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS MSG_OPERATION;
CREATE TABLE MSG_OPERATION
(
  id_operation        NUMBER NOT NULL,
  operation_type      VARCHAR2(100),
  ip_address          VARCHAR2(50),
  wsdl_operation_name VARCHAR2(60),
  wsdl_service_name   VARCHAR2(60),
  operation_time      DATE,
  host_name           VARCHAR2(60),
  PRIMARY KEY (ID_OPERATION)
);

DROP TABLE IF EXISTS MSG_REQUEST;
CREATE TABLE MSG_REQUEST
(
  id_msg       NUMBER NOT NULL,
  content_path VARCHAR2(500),
  PRIMARY KEY (ID_MSG)
);

DROP TABLE IF EXISTS MSG_RESPONSE;
CREATE TABLE MSG_RESPONSE
(
  id_msg            NUMBER NOT NULL,
  content_path      VARCHAR2(600),
  response_date     DATE,
  fault_msg         VARCHAR2(4000),
  fault_stack_trace VARCHAR2(4000),
  fault_code        VARCHAR2(255),
  PRIMARY KEY (ID_MSG)
);

DROP TABLE IF EXISTS NOM_RENNS;
CREATE TABLE NOM_RENNS
(
  id_nom_renns      NUMBER NOT NULL,
  fk_nom_judet      NUMBER NOT NULL,
  fk_nom_uat        NUMBER NOT NULL,
  fk_nom_localitate NUMBER NOT NULL,
  uid_renns         VARCHAR2(20),
  strada            VARCHAR2(100),
  numar_strada      VARCHAR2(10),
  bloc              VARCHAR2(10),
  scara             VARCHAR2(10),
  etaj              VARCHAR2(10),
  apartament        VARCHAR2(10),
  numar_postal      VARCHAR2(10),
  geometrie         GEOMETRY,
  shapefile         BLOB,
  PRIMARY KEY (ID_NOM_RENNS)
);

DROP TABLE IF EXISTS NOM_TIP_LOCALIZARE;
CREATE TABLE NOM_TIP_LOCALIZARE
(
  id_nom_tip_localizare NUMBER        NOT NULL,
  cod                   VARCHAR2(10)  NOT NULL,
  denumire              VARCHAR2(100) NOT NULL,
  descriere             VARCHAR2(500),
  grupa                 NUMBER(1)     NOT NULL,
  data_start            DATE          NOT NULL,
  data_stop             DATE,
  base_id               NUMBER,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_NOM_TIP_LOCALIZARE),
  CHECK (GRUPA IN (1, 2))
);

CREATE INDEX IDX_NOM_TIP_LOCALIZARE_BASE_ID ON NOM_TIP_LOCALIZARE (BASE_ID);
CREATE INDEX IDX_NOM_TIP_LOCALIZARE_COD ON NOM_TIP_LOCALIZARE (COD);
CREATE INDEX IDX_NOM_TIP_LOCALIZARE_GRUPA ON NOM_TIP_LOCALIZARE (GRUPA);
CREATE INDEX IDX_NOM_TIP_LOCALIZARE_LMD ON NOM_TIP_LOCALIZARE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_NOM_TIP_LOC_DAT_START_STOP ON NOM_TIP_LOCALIZARE (DATA_START, DATA_STOP);

DROP TABLE IF EXISTS NOM_TIP_REL_PREEMPTIUNE;
CREATE TABLE NOM_TIP_REL_PREEMPTIUNE
(
  id_nom_tip_rel_preemptiune NUMBER        NOT NULL,
  cod                        VARCHAR2(10)  NOT NULL,
  denumire                   VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ID_NOM_TIP_REL_PREEMPTIUNE),
  UNIQUE UK_NOM_TIP_REL_PREEMPTIUNE (COD)
);

DROP TABLE IF EXISTS PARCELA_LOCALIZARE;
CREATE TABLE PARCELA_LOCALIZARE
(
  id_parcela_localizare NUMBER       NOT NULL,
  fk_parcela_teren      NUMBER       NOT NULL,
  fk_nom_tip_localizare NUMBER       NOT NULL,
  valoare               VARCHAR2(30) NOT NULL,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_PARCELA_LOCALIZARE)
);

CREATE INDEX IDX_PARCELA_LOCALIZARE_LMD ON PARCELA_LOCALIZARE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PARCELA_LOC_FK_NOM_TIP_LOC ON PARCELA_LOCALIZARE (FK_NOM_TIP_LOCALIZARE);
CREATE INDEX IDX_PARCELA_LOC_FK_PARC_TEREN ON PARCELA_LOCALIZARE (FK_PARCELA_TEREN);

ALTER TABLE PARCELA_LOCALIZARE ADD FOREIGN KEY (FK_NOM_TIP_LOCALIZARE) REFERENCES NOM_TIP_LOCALIZARE (ID_NOM_TIP_LOCALIZARE);
ALTER TABLE PARCELA_LOCALIZARE ADD FOREIGN KEY (FK_PARCELA_TEREN) REFERENCES PARCELA_TEREN (ID_PARCELA_TEREN);

DROP TABLE IF EXISTS PREEMPTIUNE;
CREATE TABLE PREEMPTIUNE
(
  id_preemptiune          NUMBER        NOT NULL,
  fk_gospodarie           NUMBER        NOT NULL,
  nr_oferta_vanzare       VARCHAR2(20)  NOT NULL,
  fk_act_aviz_madr_dadr   NUMBER        NOT NULL,
  fk_act_adev_vanzare_lib NUMBER,
  fk_nom_judet            NUMBER,
  data_oferta_vanzare     DATE          NOT NULL,
  pret_oferta_vanzare     NUMBER(15, 2) NOT NULL,
  suprafata               NUMBER(15)    NOT NULL,
  nr_carte_funciara       VARCHAR2(20)  NOT NULL,
  last_modified_date      TIMESTAMP,
  PRIMARY KEY (ID_PREEMPTIUNE)
);

CREATE INDEX IDX_PREEMPTIUNE_FK_GOSPODARIE ON PREEMPTIUNE (FK_GOSPODARIE);
CREATE INDEX IDX_PREEMPTIUNE_LMD ON PREEMPTIUNE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PREEMP_FK_ACT_ADEV_VNZ_LIB ON PREEMPTIUNE (FK_ACT_ADEV_VANZARE_LIB);
CREATE INDEX IDX_PREEMP_FK_ACT_AV_MADR_DADR ON PREEMPTIUNE (FK_ACT_AVIZ_MADR_DADR);

ALTER TABLE PREEMPTIUNE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE PREEMPTIUNE ADD FOREIGN KEY (FK_ACT_ADEV_VANZARE_LIB) REFERENCES ACT (ID_ACT);
ALTER TABLE PREEMPTIUNE ADD FOREIGN KEY (FK_ACT_AVIZ_MADR_DADR) REFERENCES ACT (ID_ACT);

DROP TABLE IF EXISTS PERSOANA_PREEMPTIUNE;
CREATE TABLE PERSOANA_PREEMPTIUNE
(
  id_persoana_preemptiune    NUMBER    NOT NULL,
  fk_preemptiune             NUMBER    NOT NULL,
  fk_nom_tip_rel_preemptiune NUMBER    NOT NULL,
  fk_persoana_fizica         NUMBER,
  fk_persoana_rc             NUMBER,
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_PERSOANA_PREEMPTIUNE)
);

CREATE INDEX IDX_PERSOANA_PREEMPTIUNE_LMD ON PERSOANA_PREEMPTIUNE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PERS_PREEMPTIUNE_FK_PREEMP ON PERSOANA_PREEMPTIUNE (FK_PREEMPTIUNE);
CREATE INDEX IDX_PERS_PREEMP_FK_PERS_FIZICA ON PERSOANA_PREEMPTIUNE (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_PERS_PREEMP_FK_PERS_RC ON PERSOANA_PREEMPTIUNE (FK_PERSOANA_RC);
CREATE INDEX IDX_PERS_PR_FK_NOM_TIP_REL_PR ON PERSOANA_PREEMPTIUNE (FK_NOM_TIP_REL_PREEMPTIUNE);

ALTER TABLE PERSOANA_PREEMPTIUNE ADD FOREIGN KEY (FK_PREEMPTIUNE) REFERENCES PREEMPTIUNE (ID_PREEMPTIUNE);
ALTER TABLE PERSOANA_PREEMPTIUNE ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);
ALTER TABLE PERSOANA_PREEMPTIUNE ADD FOREIGN KEY (FK_PERSOANA_RC) REFERENCES PERSOANA_RC (ID_PERSOANA_RC);
ALTER TABLE PERSOANA_PREEMPTIUNE ADD FOREIGN KEY (FK_NOM_TIP_REL_PREEMPTIUNE) REFERENCES NOM_TIP_REL_PREEMPTIUNE (ID_NOM_TIP_REL_PREEMPTIUNE);

DROP TABLE IF EXISTS PLANTATIE;
CREATE TABLE PLANTATIE
(
  id_plantatie       NUMBER     NOT NULL,
  fk_gospodarie      NUMBER     NOT NULL,
  fk_cap_plantatie   NUMBER     NOT NULL,
  fk_nom_judet       NUMBER,
  an                 NUMBER(4)  NOT NULL,
  suprafata          NUMBER(15) NOT NULL,
  nr_pom_rod         NUMBER(10),
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_PLANTATIE)
);
CREATE INDEX IDX_PLANTATIE_AN ON PLANTATIE (AN);
CREATE INDEX IDX_PLANTATIE_FK_CAP_PLANT ON PLANTATIE (FK_CAP_PLANTATIE);
CREATE INDEX IDX_PLANTATIE_FK_GOSPODARIE ON PLANTATIE (FK_GOSPODARIE);
CREATE INDEX IDX_PLANTATIE_LMD ON PLANTATIE (LAST_MODIFIED_DATE);

ALTER TABLE PLANTATIE ADD FOREIGN KEY (FK_CAP_PLANTATIE) REFERENCES CAP_PLANTATIE (ID_CAP_PLANTATIE);
ALTER TABLE PLANTATIE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS PLANTATIE_PROD;
CREATE TABLE PLANTATIE_PROD
(
  id_plantatie_prod     NUMBER    NOT NULL,
  fk_nom_uat            NUMBER    NOT NULL,
  fk_cap_plantatie_prod NUMBER    NOT NULL,
  fk_nom_judet          NUMBER,
  an                    NUMBER(4) NOT NULL,
  suprafata             NUMBER(15),
  prod_medie            NUMBER(10),
  prod_total            NUMBER(15),
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_PLANTATIE_PROD)
);

CREATE INDEX IDX_PLANTATIE_PROD_AN ON PLANTATIE_PROD (AN);
CREATE INDEX IDX_PLANTATIE_PROD_FK_NOM_UAT ON PLANTATIE_PROD (FK_NOM_UAT);
CREATE INDEX IDX_PLANTATIE_PROD_LMD ON PLANTATIE_PROD (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PLANT_PROD_FK_CAP_PLANT_PR ON PLANTATIE_PROD (FK_CAP_PLANTATIE_PROD);

ALTER TABLE PLANTATIE_PROD ADD FOREIGN KEY (FK_NOM_UAT) REFERENCES NOM_UAT (ID_NOM_UAT);
ALTER TABLE PLANTATIE_PROD ADD FOREIGN KEY (FK_CAP_PLANTATIE_PROD) REFERENCES CAP_PLANTATIE_PROD (ID_CAP_PLANTATIE_PROD);

DROP TABLE IF EXISTS POM_RAZLET;
CREATE TABLE POM_RAZLET
(
  id_pom_razlet      NUMBER     NOT NULL,
  fk_gospodarie      NUMBER     NOT NULL,
  fk_cap_pom_razlet  NUMBER     NOT NULL,
  fk_nom_judet       NUMBER,
  an                 NUMBER(4)  NOT NULL,
  nr_pom_rod         NUMBER(10) NOT NULL,
  nr_pom_tanar       NUMBER(10) NOT NULL,
  last_modified_date TIMESTAMP,
  PRIMARY KEY (ID_POM_RAZLET)
);
CREATE INDEX IDX_POM_RAZLET_AN ON POM_RAZLET (AN);
CREATE INDEX IDX_POM_RAZLET_FK_CAP_POM_RAZ ON POM_RAZLET (FK_CAP_POM_RAZLET);
CREATE INDEX IDX_POM_RAZLET_FK_GOSPODARIE ON POM_RAZLET (FK_GOSPODARIE);
CREATE INDEX IDX_POM_RAZLET_LMD ON POM_RAZLET (LAST_MODIFIED_DATE);

ALTER TABLE POM_RAZLET ADD FOREIGN KEY (FK_CAP_POM_RAZLET) REFERENCES CAP_POM_RAZLET (ID_CAP_POM_RAZLET);
ALTER TABLE POM_RAZLET ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS PROPRIETAR_PARCELA;
CREATE TABLE PROPRIETAR_PARCELA
(
  id_proprietar_parcela NUMBER    NOT NULL,
  fk_parcela_teren      NUMBER    NOT NULL,
  fk_persoana_fizica    NUMBER    NOT NULL,
  fk_nom_judet          NUMBER,
  last_modified_date    TIMESTAMP,
  PRIMARY KEY (ID_PROPRIETAR_PARCELA)
);

CREATE INDEX IDX_PROPRIETAR_PARCELA_LMD ON PROPRIETAR_PARCELA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_PROP_PARCELA_FK_PARC_TEREN ON PROPRIETAR_PARCELA (FK_PARCELA_TEREN);
CREATE INDEX IDX_PROP_PARCELA_FK_PERS_FIZ ON PROPRIETAR_PARCELA (FK_PERSOANA_FIZICA);

ALTER TABLE PROPRIETAR_PARCELA ADD FOREIGN KEY (FK_PARCELA_TEREN) REFERENCES PARCELA_TEREN (ID_PARCELA_TEREN);
ALTER TABLE PROPRIETAR_PARCELA ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);

DROP TABLE IF EXISTS SISTEM_TEHNIC;
CREATE TABLE SISTEM_TEHNIC
(
  id_sistem_tehnic     NUMBER    NOT NULL,
  fk_gospodarie        NUMBER    NOT NULL,
  fk_cap_sistem_tehnic NUMBER    NOT NULL,
  fk_nom_judet         NUMBER,
  an                   NUMBER(4) NOT NULL,
  numar                NUMBER(5) NOT NULL,
  last_modified_date   TIMESTAMP,
  PRIMARY KEY (ID_SISTEM_TEHNIC)
);
CREATE INDEX IDX_SISTEM_TEHNIC_AN ON SISTEM_TEHNIC (AN);
CREATE INDEX IDX_SISTEM_TEHNIC_FK_GOSPOD ON SISTEM_TEHNIC (FK_GOSPODARIE);
CREATE INDEX IDX_SISTEM_TEHNIC_LMD ON SISTEM_TEHNIC (LAST_MODIFIED_DATE);
CREATE INDEX IDX_SIST_TEHN_FK_CAP_SIST_TEHN ON SISTEM_TEHNIC (FK_CAP_SISTEM_TEHNIC);

ALTER TABLE SISTEM_TEHNIC ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE SISTEM_TEHNIC ADD FOREIGN KEY (FK_CAP_SISTEM_TEHNIC) REFERENCES CAP_SISTEM_TEHNIC (ID_CAP_SISTEM_TEHNIC);

DROP TABLE IF EXISTS SUBSTANTA_CHIMICA;
CREATE TABLE SUBSTANTA_CHIMICA
(
  id_substanta_chimica     NUMBER     NOT NULL,
  fk_gospodarie            NUMBER     NOT NULL,
  fk_cap_substanta_chimica NUMBER     NOT NULL,
  fk_nom_judet             NUMBER,
  an                       NUMBER(4)  NOT NULL,
  suprafata_total          NUMBER(15) NOT NULL,
  cantitate_total          NUMBER(10) NOT NULL,
  suprafata_azotoase       NUMBER(15) NOT NULL,
  cantitate_azotoase       NUMBER(10) NOT NULL,
  suprafata_fosfatice      NUMBER(15) NOT NULL,
  cantitate_fosfatice      NUMBER(10) NOT NULL,
  suprafata_potasice       NUMBER(15) NOT NULL,
  cantitate_potasice       NUMBER(10) NOT NULL,
  last_modified_date       TIMESTAMP,
  PRIMARY KEY (ID_SUBSTANTA_CHIMICA)
);
CREATE INDEX IDX_SUBSTANTA_CHIMICA_AN ON SUBSTANTA_CHIMICA (AN);
CREATE INDEX IDX_SUBSTANTA_CHIMICA_LMD ON SUBSTANTA_CHIMICA (LAST_MODIFIED_DATE);
CREATE INDEX IDX_SUBST_CHIMICA_FK_GOSPOD ON SUBSTANTA_CHIMICA (FK_GOSPODARIE);
CREATE INDEX IDX_SUBST_CHIM_FK_CAP_SUB_CHIM ON SUBSTANTA_CHIMICA (FK_CAP_SUBSTANTA_CHIMICA);

ALTER TABLE SUBSTANTA_CHIMICA ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE SUBSTANTA_CHIMICA ADD FOREIGN KEY (FK_CAP_SUBSTANTA_CHIMICA) REFERENCES CAP_SUBSTANTA_CHIMICA (ID_CAP_SUBSTANTA_CHIMICA);

DROP TABLE IF EXISTS SUCCESIBIL;
CREATE TABLE SUCCESIBIL
(
  id_succesibil          NUMBER    NOT NULL,
  fk_mentiune_cerere_suc NUMBER    NOT NULL,
  fk_adresa              NUMBER    NOT NULL,
  fk_persoana_fizica     NUMBER    NOT NULL,
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_SUCCESIBIL)
);
CREATE INDEX IDX_SUCCESIBIL_FK_ADRESA ON SUCCESIBIL (FK_ADRESA);
CREATE INDEX IDX_SUCCESIBIL_FK_MENT_CER_SUC ON SUCCESIBIL (FK_MENTIUNE_CERERE_SUC);
CREATE INDEX IDX_SUCCESIBIL_FK_PERS_FIZICA ON SUCCESIBIL (FK_PERSOANA_FIZICA);
CREATE INDEX IDX_SUCCESIBIL_LMD ON SUCCESIBIL (LAST_MODIFIED_DATE);

ALTER TABLE SUCCESIBIL ADD FOREIGN KEY (FK_ADRESA) REFERENCES ADRESA (ID_ADRESA);
ALTER TABLE SUCCESIBIL ADD FOREIGN KEY (FK_MENTIUNE_CERERE_SUC) REFERENCES MENTIUNE_CERERE_SUC (ID_MENTIUNE_CERERE_SUC);
ALTER TABLE SUCCESIBIL ADD FOREIGN KEY (FK_PERSOANA_FIZICA) REFERENCES PERSOANA_FIZICA (ID_PERSOANA_FIZICA);

DROP TABLE IF EXISTS SUPRAFATA_CATEGORIE;
CREATE TABLE SUPRAFATA_CATEGORIE
(
  id_suprafata_categorie     NUMBER     NOT NULL,
  fk_gospodarie              NUMBER     NOT NULL,
  fk_cap_categorie_folosinta NUMBER     NOT NULL,
  fk_nom_judet               NUMBER,
  an                         NUMBER(4)  NOT NULL,
  suprafata_total            NUMBER(15) NOT NULL,
  suprafata_local            NUMBER(15),
  suprafata_alt              NUMBER(15),
  last_modified_date         TIMESTAMP,
  PRIMARY KEY (ID_SUPRAFATA_CATEGORIE)
);

CREATE INDEX IDX_SUPRAFATA_CATEGORIE_AN ON SUPRAFATA_CATEGORIE (AN);
CREATE INDEX IDX_SUPRAFATA_CATEGORIE_LMD ON SUPRAFATA_CATEGORIE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_SUPRAF_CATEG_FK_GOSPODARIE ON SUPRAFATA_CATEGORIE (FK_GOSPODARIE);
CREATE INDEX IDX_SUPRAF_CAT_FK_CAP_CAT_FOL ON SUPRAFATA_CATEGORIE (FK_CAP_CATEGORIE_FOLOSINTA);

ALTER TABLE SUPRAFATA_CATEGORIE ADD FOREIGN KEY (FK_CAP_CATEGORIE_FOLOSINTA) REFERENCES CAP_CATEGORIE_FOLOSINTA (ID_CAP_CATEGORIE_FOLOSINTA);
ALTER TABLE SUPRAFATA_CATEGORIE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);

DROP TABLE IF EXISTS SUPRAFATA_UTILIZARE;
CREATE TABLE SUPRAFATA_UTILIZARE
(
  id_suprafata_utilizare NUMBER     NOT NULL,
  fk_gospodarie          NUMBER     NOT NULL,
  fk_cap_mod_utilizare   NUMBER     NOT NULL,
  fk_nom_judet           NUMBER,
  an                     NUMBER(4)  NOT NULL,
  suprafata              NUMBER(15) NOT NULL,
  last_modified_date     TIMESTAMP,
  PRIMARY KEY (ID_SUPRAFATA_UTILIZARE)
);
CREATE INDEX IDX_SUPRAFATA_UTILIZARE_AN ON SUPRAFATA_UTILIZARE (AN);
CREATE INDEX IDX_SUPRAFATA_UTILIZARE_LMD ON SUPRAFATA_UTILIZARE (LAST_MODIFIED_DATE);
CREATE INDEX IDX_SUPRAF_UTILIZARE_FK_GOSPOD ON SUPRAFATA_UTILIZARE (FK_GOSPODARIE);
CREATE INDEX IDX_SUPR_UTIL_FK_CAP_MOD_UTIL ON SUPRAFATA_UTILIZARE (FK_CAP_MOD_UTILIZARE);

ALTER TABLE SUPRAFATA_UTILIZARE ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE SUPRAFATA_UTILIZARE ADD FOREIGN KEY (FK_CAP_MOD_UTILIZARE) REFERENCES CAP_MOD_UTILIZARE (ID_CAP_MOD_UTILIZARE);

DROP TABLE IF EXISTS TABLE_DELETE_LOG;
CREATE TABLE TABLE_DELETE_LOG
(
  table_name   VARCHAR2(30) NOT NULL,
  record_id    NUMBER       NOT NULL,
  deleted_date TIMESTAMP
);
CREATE INDEX IDX_TABLE_DELETE_LOG_DEL_DATE ON TABLE_DELETE_LOG (DELETED_DATE);
CREATE INDEX IDX_TABLE_DELETE_LOG_RECORD_ID ON TABLE_DELETE_LOG (RECORD_ID);
CREATE INDEX IDX_TABLE_DEL_LOG_TABLE_NAME ON TABLE_DELETE_LOG (TABLE_NAME);


DROP TABLE IF EXISTS TEREN_IRIGAT;
CREATE TABLE TEREN_IRIGAT
(
  id_teren_irigat     NUMBER     NOT NULL,
  fk_gospodarie       NUMBER     NOT NULL,
  fk_cap_teren_irigat NUMBER     NOT NULL,
  fk_nom_judet        NUMBER,
  an                  NUMBER(4)  NOT NULL,
  suprafata           NUMBER(15) NOT NULL,
  last_modified_date  TIMESTAMP,
  PRIMARY KEY (ID_TEREN_IRIGAT)
);
CREATE INDEX IDX_TEREN_IRIGAT_AN ON TEREN_IRIGAT (AN);
CREATE INDEX IDX_TEREN_IRIGAT_FK_GOSPODARIE ON TEREN_IRIGAT (FK_GOSPODARIE);
CREATE INDEX IDX_TEREN_IRIGAT_LMD ON TEREN_IRIGAT (LAST_MODIFIED_DATE);
CREATE INDEX IDX_TEREN_IRIG_FK_CAP_TER_IRIG ON TEREN_IRIGAT (FK_CAP_TEREN_IRIGAT);

ALTER TABLE TEREN_IRIGAT ADD FOREIGN KEY (FK_GOSPODARIE) REFERENCES GOSPODARIE (ID_GOSPODARIE);
ALTER TABLE TEREN_IRIGAT ADD FOREIGN KEY (FK_CAP_TEREN_IRIGAT) REFERENCES CAP_TEREN_IRIGAT (ID_CAP_TEREN_IRIGAT);

DROP SEQUENCE IF EXISTS SEQ_ACT;
CREATE SEQUENCE SEQ_ACT
  minvalue 1
  maxvalue 9999999999999
START WITH 1202
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ACT_DETINERE;
CREATE SEQUENCE SEQ_ACT_DETINERE
  minvalue 1
  maxvalue 9999999999999
START WITH 1014
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ADRESA;
CREATE SEQUENCE SEQ_ADRESA
  minvalue 1
  maxvalue 9999999999999
START WITH 1521
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ADRESA_GOSPODARIE;
CREATE SEQUENCE SEQ_ADRESA_GOSPODARIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1437
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ANIMAL_PROD;
CREATE SEQUENCE SEQ_ANIMAL_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1045
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APLICARE_INGRASAMANT;
CREATE SEQUENCE SEQ_APLICARE_INGRASAMANT
  minvalue 1
  maxvalue 9999999999999
START WITH 1160
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ATESTAT;
CREATE SEQUENCE SEQ_ATESTAT
  minvalue 1
  maxvalue 9999999999999
START WITH 1033
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ATESTAT_PRODUS;
CREATE SEQUENCE SEQ_ATESTAT_PRODUS
  minvalue 1
  maxvalue 9999999999999
START WITH 1096
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_ATESTAT_VIZA;
CREATE SEQUENCE SEQ_ATESTAT_VIZA
  minvalue 1
  maxvalue 9999999999999
START WITH 1032
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_ANIMAL_PROD;
CREATE SEQUENCE SEQ_CAP_ANIMAL_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1010
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_APLICARE_INGRASAMANT;
CREATE SEQUENCE SEQ_CAP_APLICARE_INGRASAMANT
  minvalue 1
  maxvalue 9999999999999
START WITH 1010
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_CATEGORIE_ANIMAL;
CREATE SEQUENCE SEQ_CAP_CATEGORIE_ANIMAL
  minvalue 1
  maxvalue 9999999999999
START WITH 1007
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_CATEGORIE_FOLOSINTA;
CREATE SEQUENCE SEQ_CAP_CATEGORIE_FOLOSINTA
  minvalue 1
  maxvalue 9999999999999
START WITH 1017
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_CULTURA;
CREATE SEQUENCE SEQ_CAP_CULTURA
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_CULTURA_PROD;
CREATE SEQUENCE SEQ_CAP_CULTURA_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_FRUCT_PROD;
CREATE SEQUENCE SEQ_CAP_FRUCT_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_MOD_UTILIZARE;
CREATE SEQUENCE SEQ_CAP_MOD_UTILIZARE
  minvalue 1
  maxvalue 9999999999999
START WITH 1003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_PLANTATIE;
CREATE SEQUENCE SEQ_CAP_PLANTATIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1054
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_PLANTATIE_PROD;
CREATE SEQUENCE SEQ_CAP_PLANTATIE_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_POM_RAZLET;
CREATE SEQUENCE SEQ_CAP_POM_RAZLET
  minvalue 1
  maxvalue 9999999999999
START WITH 1006
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_SISTEM_TEHNIC;
CREATE SEQUENCE SEQ_CAP_SISTEM_TEHNIC
  minvalue 1
  maxvalue 9999999999999
START WITH 1003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_SUBSTANTA_CHIMICA;
CREATE SEQUENCE SEQ_CAP_SUBSTANTA_CHIMICA
  minvalue 1
  maxvalue 9999999999999
START WITH 1007
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CAP_TEREN_IRIGAT;
CREATE SEQUENCE SEQ_CAP_TEREN_IRIGAT
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CATEGORIE_ANIMAL;
CREATE SEQUENCE SEQ_CATEGORIE_ANIMAL
  minvalue 1
  maxvalue 9999999999999
START WITH 1186
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CERERE;
CREATE SEQUENCE SEQ_CERERE
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CERERE_DETALIU;
CREATE SEQUENCE SEQ_CERERE_DETALIU
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CERTIFICAT_COM;
CREATE SEQUENCE SEQ_CERTIFICAT_COM
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CLADIRE;
CREATE SEQUENCE SEQ_CLADIRE
  minvalue 1
  maxvalue 9999999999999
START WITH 1031
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CONTRACT;
CREATE SEQUENCE SEQ_CONTRACT
  minvalue 1
  maxvalue 9999999999999
START WITH 1076
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CROTALIE;
CREATE SEQUENCE SEQ_CROTALIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1054
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CULTURA;
CREATE SEQUENCE SEQ_CULTURA
  minvalue 1
  maxvalue 9999999999999
START WITH 1229
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_CULTURA_PROD;
CREATE SEQUENCE SEQ_CULTURA_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1352
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_DETINATOR_PF;
CREATE SEQUENCE SEQ_DETINATOR_PF
  minvalue 1
  maxvalue 9999999999999
START WITH 1163
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_DETINATOR_PJ;
CREATE SEQUENCE SEQ_DETINATOR_PJ
  minvalue 1
  maxvalue 9999999999999
START WITH 1021
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_DOC_CERERE;
CREATE SEQUENCE SEQ_DOC_CERERE
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_FLUX_CERERE;
CREATE SEQUENCE SEQ_FLUX_CERERE
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_FLUX_REGISTRU;
CREATE SEQUENCE SEQ_FLUX_REGISTRU
  minvalue 1
  maxvalue 9999999999999
START WITH 3681
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_FRUCT_PROD;
CREATE SEQUENCE SEQ_FRUCT_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1160
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_GEOLOCATOR_ADRESA;
CREATE SEQUENCE SEQ_GEOLOCATOR_ADRESA
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_GEOMETRIE_CLADIRE;
CREATE SEQUENCE SEQ_GEOMETRIE_CLADIRE
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_GEOMETRIE_PARCELA_TEREN;
CREATE SEQUENCE SEQ_GEOMETRIE_PARCELA_TEREN
  minvalue 1
  maxvalue 9999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_GOSPODARIE;
CREATE SEQUENCE SEQ_GOSPODARIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1197
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_INVENTAR_GOSP_UAT;
CREATE SEQUENCE SEQ_INVENTAR_GOSP_UAT
  minvalue 1
  maxvalue 9999999999999
START WITH 1010
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_MEMBRU_PF;
CREATE SEQUENCE SEQ_MEMBRU_PF
  minvalue 1
  maxvalue 9999999999999
START WITH 1204
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_MENTIUNE_CERERE_SUC;
CREATE SEQUENCE SEQ_MENTIUNE_CERERE_SUC
  minvalue 1
  maxvalue 9999999999999
START WITH 1056
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_MENTIUNE_SPECIALA;
CREATE SEQUENCE SEQ_MENTIUNE_SPECIALA
  minvalue 1
  maxvalue 9999999999999
START WITH 1021
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_CATEGORIE_FOLOSINTA;
CREATE SEQUENCE SEQ_NOM_CATEGORIE_FOLOSINTA
  minvalue 1
  maxvalue 9999999999999
START WITH 1003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_DESTINATIE_CLADIRE;
CREATE SEQUENCE SEQ_NOM_DESTINATIE_CLADIRE
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_JUDET;
CREATE SEQUENCE SEQ_NOM_JUDET
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_LEGATURA_RUDENIE;
CREATE SEQUENCE SEQ_NOM_LEGATURA_RUDENIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_LOCALITATE;
CREATE SEQUENCE SEQ_NOM_LOCALITATE
  minvalue 1
  maxvalue 9999999999999
START WITH 100003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_MODALITATE_DETINERE;
CREATE SEQUENCE SEQ_NOM_MODALITATE_DETINERE
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_PLANTA_CULTURA;
CREATE SEQUENCE SEQ_NOM_PLANTA_CULTURA
  minvalue 1
  maxvalue 9999999999999
START WITH 1003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_POM_ARBUST;
CREATE SEQUENCE SEQ_NOM_POM_ARBUST
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_SPECIE_ANIMAL;
CREATE SEQUENCE SEQ_NOM_SPECIE_ANIMAL
  minvalue 1
  maxvalue 9999999999999
START WITH 1002
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TARA;
CREATE SEQUENCE SEQ_NOM_TARA
  minvalue 1
  maxvalue 9999999999999
START WITH 1001
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TIP_ACT;
CREATE SEQUENCE SEQ_NOM_TIP_ACT
  minvalue 1
  maxvalue 9999999999999
START WITH 1001
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TIP_CLADIRE;
CREATE SEQUENCE SEQ_NOM_TIP_CLADIRE
  minvalue 1
  maxvalue 9999999999999
START WITH 1003
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TIP_DETINATOR;
CREATE SEQUENCE SEQ_NOM_TIP_DETINATOR
  minvalue 1
  maxvalue 9999999999999
START WITH 1001
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TIP_EXPLOATATIE;
CREATE SEQUENCE SEQ_NOM_TIP_EXPLOATATIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1004
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_TIP_LOCALIZARE;
CREATE SEQUENCE SEQ_NOM_TIP_LOCALIZARE
  minvalue 1
  maxvalue 9999999999999
START WITH 1001
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_NOM_UAT;
CREATE SEQUENCE SEQ_NOM_UAT
  minvalue 1
  maxvalue 9999999999999
START WITH 10000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_OPERATION;
CREATE SEQUENCE SEQ_OPERATION
  minvalue 1
  maxvalue 9999999999999
START WITH 42567
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PARCELA_LOCALIZARE;
CREATE SEQUENCE SEQ_PARCELA_LOCALIZARE
  minvalue 1
  maxvalue 9999999999999
START WITH 1058
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PARCELA_TEREN;
CREATE SEQUENCE SEQ_PARCELA_TEREN
  minvalue 1
  maxvalue 9999999999999
START WITH 1031
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PERSOANA_FIZICA;
CREATE SEQUENCE SEQ_PERSOANA_FIZICA
  minvalue 1
  maxvalue 9999999999999
START WITH 1105
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PERSOANA_PREEMPTIUNE;
CREATE SEQUENCE SEQ_PERSOANA_PREEMPTIUNE
  minvalue 1
  maxvalue 9999999999999
START WITH 1138
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PERSOANA_RC;
CREATE SEQUENCE SEQ_PERSOANA_RC
  minvalue 1
  maxvalue 9999999999999
START WITH 1014
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PLANTATIE;
CREATE SEQUENCE SEQ_PLANTATIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1290
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PLANTATIE_PROD;
CREATE SEQUENCE SEQ_PLANTATIE_PROD
  minvalue 1
  maxvalue 9999999999999
START WITH 1063
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_POM_RAZLET;
CREATE SEQUENCE SEQ_POM_RAZLET
  minvalue 1
  maxvalue 9999999999999
START WITH 1041
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PREEMPTIUNE;
CREATE SEQUENCE SEQ_PREEMPTIUNE
  minvalue 1
  maxvalue 9999999999999
START WITH 1071
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_PROPRIETAR_PARCELA;
CREATE SEQUENCE SEQ_PROPRIETAR_PARCELA
  minvalue 1
  maxvalue 9999999999999
START WITH 1028
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_REGISTRU;
CREATE SEQUENCE SEQ_REGISTRU
  minvalue 1
  maxvalue 9999999999999
START WITH 2381
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_SISTEM_TEHNIC;
CREATE SEQUENCE SEQ_SISTEM_TEHNIC
  minvalue 1
  maxvalue 9999999999999
START WITH 1170
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_SUBSTANTA_CHIMICA;
CREATE SEQUENCE SEQ_SUBSTANTA_CHIMICA
  minvalue 1
  maxvalue 9999999999999
START WITH 1078
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_SUCCESIBIL;
CREATE SEQUENCE SEQ_SUCCESIBIL
  minvalue 1
  maxvalue 9999999999999
START WITH 1055
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_SUPRAFATA_CATEGORIE;
CREATE SEQUENCE SEQ_SUPRAFATA_CATEGORIE
  minvalue 1
  maxvalue 9999999999999
START WITH 1132
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_SUPRAFATA_UTILIZARE;
CREATE SEQUENCE SEQ_SUPRAFATA_UTILIZARE
  minvalue 1
  maxvalue 9999999999999
START WITH 1255
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_TEREN_IRIGAT;
CREATE SEQUENCE SEQ_TEREN_IRIGAT
  minvalue 1
  maxvalue 9999999999999
START WITH 1095
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_OPERATIE_SESIUNE;
CREATE SEQUENCE SEQ_APP_OPERATIE_SESIUNE
  minvalue 1
  maxvalue 999999999999
START WITH 1193
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_ROL_UTILIZATOR;
CREATE SEQUENCE SEQ_APP_ROL_UTILIZATOR
  minvalue 1
  maxvalue 999999999999
START WITH 1209
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_SESIUNE;
CREATE SEQUENCE SEQ_APP_SESIUNE
  minvalue 1
  maxvalue 999999999999
START WITH 1259
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_SISTEM;
CREATE SEQUENCE SEQ_APP_SISTEM
  minvalue 1
  maxvalue 999999999999
START WITH 1009
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_UTILIZATOR;
CREATE SEQUENCE SEQ_APP_UTILIZATOR
  minvalue 1
  maxvalue 999999999999
START WITH 1073
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_APP_UTILIZATOR_GOSPODARIE;
CREATE SEQUENCE SEQ_APP_UTILIZATOR_GOSPODARIE
  minvalue 1
  maxvalue 999999999999
START WITH 1000
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_FLUX_REGISTRU;
CREATE SEQUENCE SEQ_FLUX_REGISTRU
  minvalue 1
  maxvalue 999999999999
START WITH 1197
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_INCARCARE;
CREATE SEQUENCE SEQ_INCARCARE
  minvalue 1
  maxvalue 999999999999
START WITH 1030
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_REGISTRU;
CREATE SEQUENCE SEQ_REGISTRU
  minvalue 1
  maxvalue 999999999999
START WITH 1148
INCREMENT BY 1;

DROP SEQUENCE IF EXISTS SEQ_UAT_CONFIG;
CREATE SEQUENCE SEQ_UAT_CONFIG
  minvalue 1
  maxvalue 999999999999
START WITH 1005
INCREMENT BY 1;


/*TRIGGERS*/
CREATE TRIGGER PERSOANA_FIZICA_TRIGGER_INSERT AFTER INSERT ON PERSOANA_FIZICA FOR EACH ROW CALL "ro.uti.ran.core.database.H2Trigger";
CREATE TRIGGER PERSOANA_FIZICA_TRIGGER_UPDATE BEFORE UPDATE ON PERSOANA_FIZICA FOR EACH ROW CALL "ro.uti.ran.core.database.H2Trigger";
